
jkit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e6  00800100  00001824  000018b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000589  008003e6  008003e6  00001b9e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000363  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f0  00000000  00000000  00001f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049e  00000000  00000000  00003311  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001253  00000000  00000000  000037af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00004d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c08  00000000  00000000  00005140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3e       	cpi	r26, 0xE6	; 230
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	19 e0       	ldi	r17, 0x09	; 9
      b4:	a6 ee       	ldi	r26, 0xE6	; 230
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 36       	cpi	r26, 0x6F	; 111
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 c5 08 	call	0x118a	; 0x118a <main>
      c6:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <rx_char0>:
/*
 * Function tx_char without interrupt mode 
 */
UINT8 rx_char0(void)
{
 while(!(UCSR0A & (1 << RXC))); 
      ce:	5f 9b       	sbis	0x0b, 7	; 11
      d0:	fe cf       	rjmp	.-4      	; 0xce <rx_char0>
 return UDR0 & 0xff;
      d2:	8c b1       	in	r24, 0x0c	; 12
}
      d4:	08 95       	ret

000000d6 <tx_char0>:
/*
 * Function tx_char without interrupt mode 
 */
void tx_char0(UINT8 c)
{
 while(!(UCSR0A & (1 << UDRE1))); 
      d6:	5d 9b       	sbis	0x0b, 5	; 11
      d8:	fe cf       	rjmp	.-4      	; 0xd6 <tx_char0>
 UDR0 = c;
      da:	8c b9       	out	0x0c, r24	; 12
}
      dc:	08 95       	ret

000000de <rx_char1_if_any>:

UINT8 rx_char1_if_any(void)
{
    UINT8 tmp;
    if((UCSR1A & (1 << RXC))) {
      de:	80 91 9b 00 	lds	r24, 0x009B
      e2:	87 fd       	sbrc	r24, 7
      e4:	02 c0       	rjmp	.+4      	; 0xea <rx_char1_if_any+0xc>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	08 95       	ret
	    tmp = UDR1;
      ea:	80 91 9c 00 	lds	r24, 0x009C
      ee:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
    }
    return 0;
}
      f0:	08 95       	ret

000000f2 <rx_char1>:

UINT8 rx_char1(void)
{
 while(!(UCSR1A & (1 << RXC))); 
      f2:	80 91 9b 00 	lds	r24, 0x009B
      f6:	87 ff       	sbrs	r24, 7
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <rx_char1>
 return UDR1 & 0xff;
      fa:	80 91 9c 00 	lds	r24, 0x009C
}
      fe:	08 95       	ret

00000100 <tx_char1>:

/*
 * Function tx_char without interrupt mode 
 */
void tx_char1(UINT8 c)
{
     100:	98 2f       	mov	r25, r24
 while(!(UCSR1A & (1 << UDRE1))); 
     102:	80 91 9b 00 	lds	r24, 0x009B
     106:	85 ff       	sbrs	r24, 5
     108:	fc cf       	rjmp	.-8      	; 0x102 <tx_char1+0x2>
 UDR1 = c;
     10a:	90 93 9c 00 	sts	0x009C, r25
}
     10e:	08 95       	ret

00000110 <uart_init>:

int uart_init(int ch,int stop,int parity, int baud, int rx_intr,int tx_intr)
{
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17


 if( ch == UART_CH0 )
     118:	00 97       	sbiw	r24, 0x00	; 0
     11a:	a1 f5       	brne	.+104    	; 0x184 <uart_init+0x74>
 {
  UCSR0A = (mcu_baud_tbl[baud].UX2 << U2X);
     11c:	f9 01       	movw	r30, r18
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	e2 0f       	add	r30, r18
     124:	f3 1f       	adc	r31, r19
     126:	e7 5b       	subi	r30, 0xB7	; 183
     128:	fd 4f       	sbci	r31, 0xFD	; 253
     12a:	82 81       	ldd	r24, Z+2	; 0x02
     12c:	88 0f       	add	r24, r24
     12e:	8b b9       	out	0x0b, r24	; 11
  UCSR0B = 0;
     130:	1a b8       	out	0x0a, r1	; 10
  if(parity == PARITY_NONE)
     132:	41 15       	cp	r20, r1
     134:	51 05       	cpc	r21, r1
     136:	19 f4       	brne	.+6      	; 0x13e <uart_init+0x2e>
   UCSR0C = 0 << UPM10;
     138:	10 92 95 00 	sts	0x0095, r1
     13c:	08 c0       	rjmp	.+16     	; 0x14e <uart_init+0x3e>
  else if(parity == PARITY_ODD)
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	51 05       	cpc	r21, r1
     142:	11 f4       	brne	.+4      	; 0x148 <uart_init+0x38>
   UCSR0C = 3 << UPM10;
     144:	80 e3       	ldi	r24, 0x30	; 48
     146:	01 c0       	rjmp	.+2      	; 0x14a <uart_init+0x3a>
  else // Even parity
   UCSR0C = 2 << UPM10;
     148:	80 e2       	ldi	r24, 0x20	; 32
     14a:	80 93 95 00 	sts	0x0095, r24

  UCSR0C |= 3 << 1; // 8 bits default
     14e:	80 91 95 00 	lds	r24, 0x0095
     152:	86 60       	ori	r24, 0x06	; 6
     154:	80 93 95 00 	sts	0x0095, r24
  UBRR0H = mcu_baud_tbl[baud].ubrr >> 8;
     158:	f9 01       	movw	r30, r18
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e2 0f       	add	r30, r18
     160:	f3 1f       	adc	r31, r19
     162:	e7 5b       	subi	r30, 0xB7	; 183
     164:	fd 4f       	sbci	r31, 0xFD	; 253
     166:	90 81       	ld	r25, Z
     168:	81 81       	ldd	r24, Z+1	; 0x01
     16a:	80 93 90 00 	sts	0x0090, r24
  UBRR0L = mcu_baud_tbl[baud].ubrr & 0xff;
     16e:	99 b9       	out	0x09, r25	; 9
  if(rx_intr) UCSR0B |= (1 << RXCIE1);
     170:	01 2b       	or	r16, r17
     172:	09 f0       	breq	.+2      	; 0x176 <uart_init+0x66>
     174:	57 9a       	sbi	0x0a, 7	; 10
  if(tx_intr) UCSR0B |= (1 << UDRIE);
     176:	ef 28       	or	r14, r15
     178:	09 f0       	breq	.+2      	; 0x17c <uart_init+0x6c>
     17a:	55 9a       	sbi	0x0a, 5	; 10
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     17c:	8a b1       	in	r24, 0x0a	; 10
     17e:	88 61       	ori	r24, 0x18	; 24
     180:	8a b9       	out	0x0a, r24	; 10
     182:	45 c0       	rjmp	.+138    	; 0x20e <uart_init+0xfe>

  return 0;
 }
 else if( ch == UART_CH1 )
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	19 f0       	breq	.+6      	; 0x18e <uart_init+0x7e>
     188:	2f ef       	ldi	r18, 0xFF	; 255
     18a:	3f ef       	ldi	r19, 0xFF	; 255
     18c:	42 c0       	rjmp	.+132    	; 0x212 <uart_init+0x102>
 {
  UCSR1A = (mcu_baud_tbl[baud].UX2 << U2X);
     18e:	f9 01       	movw	r30, r18
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	e2 0f       	add	r30, r18
     196:	f3 1f       	adc	r31, r19
     198:	e7 5b       	subi	r30, 0xB7	; 183
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	82 81       	ldd	r24, Z+2	; 0x02
     19e:	88 0f       	add	r24, r24
     1a0:	80 93 9b 00 	sts	0x009B, r24
  UCSR1B = 0;
     1a4:	10 92 9a 00 	sts	0x009A, r1
  if(parity == PARITY_NONE)
     1a8:	41 15       	cp	r20, r1
     1aa:	51 05       	cpc	r21, r1
     1ac:	19 f4       	brne	.+6      	; 0x1b4 <uart_init+0xa4>
   UCSR1C = 0 << UPM10;
     1ae:	10 92 9d 00 	sts	0x009D, r1
     1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <uart_init+0xb4>
  else if(parity == PARITY_ODD)
     1b4:	41 30       	cpi	r20, 0x01	; 1
     1b6:	51 05       	cpc	r21, r1
     1b8:	11 f4       	brne	.+4      	; 0x1be <uart_init+0xae>
   UCSR1C = 3 << UPM10;
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <uart_init+0xb0>
  else // Even parity
   UCSR1C = 2 << UPM10;
     1be:	80 e2       	ldi	r24, 0x20	; 32
     1c0:	80 93 9d 00 	sts	0x009D, r24

  UCSR1C |= 3 << 1; // 8 bits default
     1c4:	80 91 9d 00 	lds	r24, 0x009D
     1c8:	86 60       	ori	r24, 0x06	; 6
     1ca:	80 93 9d 00 	sts	0x009D, r24
  UBRR1H = mcu_baud_tbl[baud].ubrr >> 8;
     1ce:	f9 01       	movw	r30, r18
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	e7 5b       	subi	r30, 0xB7	; 183
     1da:	fd 4f       	sbci	r31, 0xFD	; 253
     1dc:	90 81       	ld	r25, Z
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	80 93 98 00 	sts	0x0098, r24
  UBRR1L = mcu_baud_tbl[baud].ubrr & 0xff;
     1e4:	90 93 99 00 	sts	0x0099, r25
  if(rx_intr) UCSR1B |= (1 << RXCIE1);
     1e8:	01 2b       	or	r16, r17
     1ea:	29 f0       	breq	.+10     	; 0x1f6 <uart_init+0xe6>
     1ec:	80 91 9a 00 	lds	r24, 0x009A
     1f0:	80 68       	ori	r24, 0x80	; 128
     1f2:	80 93 9a 00 	sts	0x009A, r24
  if(tx_intr) UCSR1B |= (1 << UDRIE);
     1f6:	ef 28       	or	r14, r15
     1f8:	29 f0       	breq	.+10     	; 0x204 <uart_init+0xf4>
     1fa:	80 91 9a 00 	lds	r24, 0x009A
     1fe:	80 62       	ori	r24, 0x20	; 32
     200:	80 93 9a 00 	sts	0x009A, r24
  UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     204:	80 91 9a 00 	lds	r24, 0x009A
     208:	88 61       	ori	r24, 0x18	; 24
     20a:	80 93 9a 00 	sts	0x009A, r24
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
  return 0;
 }
 return -1;
}
     212:	c9 01       	movw	r24, r18
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14
     21c:	08 95       	ret

0000021e <my_putchar>:
/*
 * Function tx_char without interrupt mode 
 */
void tx_char0(UINT8 c)
{
 while(!(UCSR0A & (1 << UDRE1))); 
     21e:	5d 9b       	sbis	0x0b, 5	; 11
     220:	fe cf       	rjmp	.-4      	; 0x21e <my_putchar>
 UDR0 = c;
     222:	8c b9       	out	0x0c, r24	; 12


void my_putchar(UINT8 c)
{
 tx_char0(c);
 if(c == '\n') tx_char0('\r');
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	21 f4       	brne	.+8      	; 0x230 <my_putchar+0x12>
/*
 * Function tx_char without interrupt mode 
 */
void tx_char0(UINT8 c)
{
 while(!(UCSR0A & (1 << UDRE1))); 
     228:	5d 9b       	sbis	0x0b, 5	; 11
     22a:	fe cf       	rjmp	.-4      	; 0x228 <my_putchar+0xa>
 UDR0 = c;
     22c:	8d e0       	ldi	r24, 0x0D	; 13
     22e:	8c b9       	out	0x0c, r24	; 12
     230:	08 95       	ret

00000232 <my_getchar>:
/*
 * Function tx_char without interrupt mode 
 */
UINT8 rx_char0(void)
{
 while(!(UCSR0A & (1 << RXC))); 
     232:	5f 9b       	sbis	0x0b, 7	; 11
     234:	fe cf       	rjmp	.-4      	; 0x232 <my_getchar>
 return UDR0 & 0xff;
     236:	8c b1       	in	r24, 0x0c	; 12
UINT8 my_getchar(void)
{
 UINT8 data;
 data = rx_char0();
 return data;
}
     238:	08 95       	ret

0000023a <sys_putchar>:
/*
 * Function tx_char without interrupt mode 
 */
void tx_char0(UINT8 c)
{
 while(!(UCSR0A & (1 << UDRE1))); 
     23a:	5d 9b       	sbis	0x0b, 5	; 11
     23c:	fe cf       	rjmp	.-4      	; 0x23a <sys_putchar>
 UDR0 = c;
     23e:	8c b9       	out	0x0c, r24	; 12

{

    tx_char0(c);

    if(c == '\n') tx_char0('\r');
     240:	8a 30       	cpi	r24, 0x0A	; 10
     242:	21 f4       	brne	.+8      	; 0x24c <sys_putchar+0x12>
/*
 * Function tx_char without interrupt mode 
 */
void tx_char0(UINT8 c)
{
 while(!(UCSR0A & (1 << UDRE1))); 
     244:	5d 9b       	sbis	0x0b, 5	; 11
     246:	fe cf       	rjmp	.-4      	; 0x244 <sys_putchar+0xa>
 UDR0 = c;
     248:	8d e0       	ldi	r24, 0x0D	; 13
     24a:	8c b9       	out	0x0c, r24	; 12

    tx_char0(c);

    if(c == '\n') tx_char0('\r');

}
     24c:	08 95       	ret

0000024e <get_cmd>:
/*
 * Function tx_char without interrupt mode 
 */
UINT8 rx_char0(void)
{
 while(!(UCSR0A & (1 << RXC))); 
     24e:	5f 9b       	sbis	0x0b, 7	; 11
     250:	fe cf       	rjmp	.-4      	; 0x24e <get_cmd>
 return UDR0 & 0xff;
     252:	8c b1       	in	r24, 0x0c	; 12
#define JC_putchar  my_putchar
static int JC_getchar()
{
	signed char c;
    c = my_getchar();
	return c;		
     254:	99 27       	eor	r25, r25
     256:	87 fd       	sbrc	r24, 7
     258:	90 95       	com	r25
{
	int c;
	while(1)
	{
		c = JC_getchar();
		if(c == (int)-1) continue;
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	8f 3f       	cpi	r24, 0xFF	; 255
     25e:	92 07       	cpc	r25, r18
     260:	b1 f3       	breq	.-20     	; 0x24e <get_cmd>
		if(Cmd_buf.idx >=  sizeof(Cmd_buf.cmd_buf) - 1) {
     262:	20 91 50 05 	lds	r18, 0x0550
     266:	2f 37       	cpi	r18, 0x7F	; 127
     268:	30 f0       	brcs	.+12     	; 0x276 <get_cmd+0x28>
			Cmd_buf.cmd_buf[Cmd_buf.idx] = '\0';
     26a:	e2 2f       	mov	r30, r18
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	e0 53       	subi	r30, 0x30	; 48
     270:	fb 4f       	sbci	r31, 0xFB	; 251
     272:	10 82       	st	Z, r1
     274:	08 95       	ret
			return;
		}
		else if(c == '\b'){
     276:	88 30       	cpi	r24, 0x08	; 8
     278:	91 05       	cpc	r25, r1
     27a:	89 f4       	brne	.+34     	; 0x29e <get_cmd+0x50>
			if((Cmd_buf.idx > 0)){
     27c:	22 23       	and	r18, r18
     27e:	39 f3       	breq	.-50     	; 0x24e <get_cmd>
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     280:	88 e0       	ldi	r24, 0x08	; 8
     282:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
			return;
		}
		else if(c == '\b'){
			if((Cmd_buf.idx > 0)){
				JC_putChar('\b'); JC_putChar(' '); JC_putChar('\b');
				Cmd_buf.idx --;
     286:	80 e2       	ldi	r24, 0x20	; 32
     288:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     292:	80 91 50 05 	lds	r24, 0x0550
     296:	81 50       	subi	r24, 0x01	; 1
     298:	80 93 50 05 	sts	0x0550, r24
     29c:	d8 cf       	rjmp	.-80     	; 0x24e <get_cmd>
			}
		}
		else if(c == '\n' || c == '\r')
     29e:	8a 30       	cpi	r24, 0x0A	; 10
     2a0:	91 05       	cpc	r25, r1
     2a2:	19 f0       	breq	.+6      	; 0x2aa <get_cmd+0x5c>
     2a4:	8d 30       	cpi	r24, 0x0D	; 13
     2a6:	91 05       	cpc	r25, r1
     2a8:	79 f4       	brne	.+30     	; 0x2c8 <get_cmd+0x7a>
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
			}
		}
		else if(c == '\n' || c == '\r')
		{
			JC_putChar('\n'); JC_putChar('\r');
			Cmd_buf.cmd_buf[Cmd_buf.idx] = '\0';
     2b0:	8d e0       	ldi	r24, 0x0D	; 13
     2b2:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     2b6:	e0 91 50 05 	lds	r30, 0x0550
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	e0 53       	subi	r30, 0x30	; 48
     2be:	fb 4f       	sbci	r31, 0xFB	; 251
     2c0:	10 82       	st	Z, r1
			Cmd_buf.idx = 0;
     2c2:	10 92 50 05 	sts	0x0550, r1
     2c6:	08 95       	ret
			return;
		}
		else
		{
			Cmd_buf.cmd_buf[Cmd_buf.idx++] = c;
     2c8:	e2 2f       	mov	r30, r18
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	e0 53       	subi	r30, 0x30	; 48
     2ce:	fb 4f       	sbci	r31, 0xFB	; 251
     2d0:	80 83       	st	Z, r24
     2d2:	2f 5f       	subi	r18, 0xFF	; 255
     2d4:	20 93 50 05 	sts	0x0550, r18
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     2d8:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
     2dc:	b8 cf       	rjmp	.-144    	; 0x24e <get_cmd>

000002de <delay_1ms>:
	}
	return 0;
}

unsigned char delay_1ms(unsigned char anchor)
{
     2de:	20 e8       	ldi	r18, 0x80	; 128
     2e0:	3e e3       	ldi	r19, 0x3E	; 62
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
	{
	    next = TCNT0;
     2e2:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     2e4:	49 2f       	mov	r20, r25
     2e6:	48 1b       	sub	r20, r24
     2e8:	24 1b       	sub	r18, r20
     2ea:	31 09       	sbc	r19, r1
     2ec:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
     2ee:	12 16       	cp	r1, r18
     2f0:	13 06       	cpc	r1, r19
     2f2:	bc f3       	brlt	.-18     	; 0x2e2 <delay_1ms+0x4>
	    next = TCNT0;
		delay -= (next - cur) & 0xff;
		cur = next;
	}
	return cur;
}
     2f4:	08 95       	ret

000002f6 <delay_ms>:

delay_ms(unsigned int v)
{
     2f6:	ac 01       	movw	r20, r24
    unsigned char start;
	start = TCNT0;
     2f8:	92 b7       	in	r25, 0x32	; 50
     2fa:	0f c0       	rjmp	.+30     	; 0x31a <delay_ms+0x24>
	while(v--) start = delay_1ms(start);
     2fc:	89 2f       	mov	r24, r25
     2fe:	20 e8       	ldi	r18, 0x80	; 128
     300:	3e e3       	ldi	r19, 0x3E	; 62
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
	{
	    next = TCNT0;
     302:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     304:	69 2f       	mov	r22, r25
     306:	68 1b       	sub	r22, r24
     308:	26 1b       	sub	r18, r22
     30a:	31 09       	sbc	r19, r1
{
    signed int delay;
	unsigned char cur,next;
	cur = anchor;
	delay = SYS_CLK / 1000;
	while(delay > 0)
     30c:	12 16       	cp	r1, r18
     30e:	13 06       	cpc	r1, r19
     310:	14 f4       	brge	.+4      	; 0x316 <delay_ms+0x20>
     312:	89 2f       	mov	r24, r25
     314:	f6 cf       	rjmp	.-20     	; 0x302 <delay_ms+0xc>
     316:	41 50       	subi	r20, 0x01	; 1
     318:	50 40       	sbci	r21, 0x00	; 0

delay_ms(unsigned int v)
{
    unsigned char start;
	start = TCNT0;
	while(v--) start = delay_1ms(start);
     31a:	41 15       	cp	r20, r1
     31c:	51 05       	cpc	r21, r1
     31e:	71 f7       	brne	.-36     	; 0x2fc <delay_ms+0x6>
}
     320:	08 95       	ret

00000322 <led_test>:
		printf("LCD wr addr = %x data = %x\n",addr,data);
	}
}

void led_test(int ac, char *av[])
{
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
    UINT8 save,i;
    TCNT0 = 0;
     32c:	12 be       	out	0x32, r1	; 50
    TCCR0 = 1; /* not scale the clock */
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	83 bf       	out	0x33, r24	; 51
	save = DDRA;
     332:	fa b2       	in	r15, 0x1a	; 26
	DDRA = 0xff;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	8a bb       	out	0x1a, r24	; 26
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
    for( i = 0 ; i < 8 ; i ++)
	{
	    PORTA = (1 << i);
     33c:	01 e0       	ldi	r16, 0x01	; 1
     33e:	10 e0       	ldi	r17, 0x00	; 0
     340:	c8 01       	movw	r24, r16
     342:	0c 2e       	mov	r0, r28
     344:	02 c0       	rjmp	.+4      	; 0x34a <led_test+0x28>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <led_test+0x24>
     34e:	8b bb       	out	0x1b, r24	; 27
		delay_ms(1000);
     350:	88 ee       	ldi	r24, 0xE8	; 232
     352:	93 e0       	ldi	r25, 0x03	; 3
     354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
     358:	21 96       	adiw	r28, 0x01	; 1
    UINT8 save,i;
    TCNT0 = 0;
    TCCR0 = 1; /* not scale the clock */
	save = DDRA;
	DDRA = 0xff;
    for( i = 0 ; i < 8 ; i ++)
     35a:	c8 30       	cpi	r28, 0x08	; 8
     35c:	d1 05       	cpc	r29, r1
     35e:	81 f7       	brne	.-32     	; 0x340 <led_test+0x1e>
	{
	    PORTA = (1 << i);
		delay_ms(1000);
	}
	DDRA = save;
     360:	fa ba       	out	0x1a, r15	; 26
	TCCR0 = 0;
     362:	13 be       	out	0x33, r1	; 51
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <my_delay>:
 /* 8 */ LED_A | LED_B | LED_C | LED_D | LED_E | LED_F | LED_G,
 /* 9 */ LED_A | LED_B | LED_C | LED_D | LED_F | LED_G
 };

my_delay(int delay)
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	00 d0       	rcall	.+0      	; 0x376 <my_delay+0x6>
     376:	00 d0       	rcall	.+0      	; 0x378 <my_delay+0x8>
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	9c 01       	movw	r18, r24
    volatile unsigned int i,j;
    for(j = 0 ; j < delay ; j ++)
     37e:	1c 82       	std	Y+4, r1	; 0x04
     380:	1b 82       	std	Y+3, r1	; 0x03
     382:	12 c0       	rjmp	.+36     	; 0x3a8 <my_delay+0x38>
    for( i = 0 ; i < 0xffff ; i ++);
     384:	1a 82       	std	Y+2, r1	; 0x02
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	05 c0       	rjmp	.+10     	; 0x394 <my_delay+0x24>
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	9f 4f       	sbci	r25, 0xFF	; 255
     39c:	b1 f7       	brne	.-20     	; 0x38a <my_delay+0x1a>
 };

my_delay(int delay)
{
    volatile unsigned int i,j;
    for(j = 0 ; j < delay ; j ++)
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	9c 81       	ldd	r25, Y+4	; 0x04
     3ac:	82 17       	cp	r24, r18
     3ae:	93 07       	cpc	r25, r19
     3b0:	48 f3       	brcs	.-46     	; 0x384 <my_delay+0x14>
    for( i = 0 ; i < 0xffff ; i ++);

}
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <init_i2c>:
#define MR_DATA_ACK 0x50
#define MR_DATA_NACK 0x58

init_i2c()
{
    PORTD = 3; /* For Pull-up override value */
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	82 bb       	out	0x12, r24	; 18
    SFIOR &= ~(1 << PUD); /* PUD */
     3c4:	80 b5       	in	r24, 0x20	; 32
     3c6:	8b 7f       	andi	r24, 0xFB	; 251
     3c8:	80 bd       	out	0x20, r24	; 32
    TWSR = TWI_PRESCALE_1;
     3ca:	10 92 71 00 	sts	0x0071, r1
    TWBR = 32; /* for 100 K Hz bus clock */
     3ce:	80 e2       	ldi	r24, 0x20	; 32
     3d0:	80 93 70 00 	sts	0x0070, r24
	TWCR = (1 << 6) | /* TWI Enable ACK bit */
     3d4:	84 e4       	ldi	r24, 0x44	; 68
     3d6:	80 93 74 00 	sts	0x0074, r24
	       (1 << 2) ; /* Enable TWI bus */
}
     3da:	08 95       	ret

000003dc <read_temp>:

int read_temp()
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <read_temp+0x6>
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
    int data;
	volatile unsigned int loop_cnt;

	loop_cnt = 0;
     3e6:	1a 82       	std	Y+2, r1	; 0x02
     3e8:	19 82       	std	Y+1, r1	; 0x01
    TWCR = TWI_START | TWI_TWINT | TWI_ENABLE;
     3ea:	84 ea       	ldi	r24, 0xA4	; 164
     3ec:	80 93 74 00 	sts	0x0074, r24
     3f0:	0d c0       	rjmp	.+26     	; 0x40c <read_temp+0x30>
	while(!(TWCR & TWI_TWINT))
	{
	    loop_cnt ++;
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4000;
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	80 50       	subi	r24, 0x00	; 0
     402:	90 41       	sbci	r25, 0x10	; 16
     404:	18 f0       	brcs	.+6      	; 0x40c <read_temp+0x30>
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e4       	ldi	r21, 0x40	; 64
     40a:	75 c0       	rjmp	.+234    	; 0x4f6 <read_temp+0x11a>
    int data;
	volatile unsigned int loop_cnt;

	loop_cnt = 0;
    TWCR = TWI_START | TWI_TWINT | TWI_ENABLE;
	while(!(TWCR & TWI_TWINT))
     40c:	80 91 74 00 	lds	r24, 0x0074
     410:	87 ff       	sbrs	r24, 7
     412:	ef cf       	rjmp	.-34     	; 0x3f2 <read_temp+0x16>
	{
	    loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4000;
	}; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != START) 
     414:	80 91 71 00 	lds	r24, 0x0071
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	88 30       	cpi	r24, 0x08	; 8
     41c:	09 f0       	breq	.+2      	; 0x420 <read_temp+0x44>
     41e:	59 c0       	rjmp	.+178    	; 0x4d2 <read_temp+0xf6>
	{
	    /* Error */
		return 0x8000;
	}
	TWDR = TEMP_I2C_ADDR + 1;
     420:	89 e9       	ldi	r24, 0x99	; 153
     422:	80 93 73 00 	sts	0x0073, r24
	TWCR = TWI_TWINT | TWI_ENABLE;
     426:	84 e8       	ldi	r24, 0x84	; 132
     428:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     42c:	1a 82       	std	Y+2, r1	; 0x02
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	0d c0       	rjmp	.+26     	; 0x44c <read_temp+0x70>
	while(!(TWCR & TWI_TWINT)){
		loop_cnt ++;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	9a 83       	std	Y+2, r25	; 0x02
     43a:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4001;
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	80 50       	subi	r24, 0x00	; 0
     442:	90 41       	sbci	r25, 0x10	; 16
     444:	18 f0       	brcs	.+6      	; 0x44c <read_temp+0x70>
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	50 e4       	ldi	r21, 0x40	; 64
     44a:	55 c0       	rjmp	.+170    	; 0x4f6 <read_temp+0x11a>
		return 0x8000;
	}
	TWDR = TEMP_I2C_ADDR + 1;
	TWCR = TWI_TWINT | TWI_ENABLE;
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT)){
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	ef cf       	rjmp	.-34     	; 0x432 <read_temp+0x56>
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4001;

    }	    ; /* wait Start condition sent */
	if((TWSR & TWI_STATUS_MASK) != MR_SLA_ACK) 
     454:	80 91 71 00 	lds	r24, 0x0071
     458:	88 7f       	andi	r24, 0xF8	; 248
     45a:	80 34       	cpi	r24, 0x40	; 64
     45c:	d1 f5       	brne	.+116    	; 0x4d2 <read_temp+0xf6>
	{
	    /* No ack flag */
		return 0x8000; 
	}
//	TWDR = cmd; /* Temp address to Command Reg*/
    TWCR = TWI_TWINT | TWI_ENABLE | TWI_ACKEN;
     45e:	84 ec       	ldi	r24, 0xC4	; 196
     460:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     464:	1a 82       	std	Y+2, r1	; 0x02
     466:	19 82       	std	Y+1, r1	; 0x01
     468:	0d c0       	rjmp	.+26     	; 0x484 <read_temp+0xa8>
	while(!(TWCR & TWI_TWINT))
	{
		loop_cnt ++;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4002;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	80 50       	subi	r24, 0x00	; 0
     47a:	90 41       	sbci	r25, 0x10	; 16
     47c:	18 f0       	brcs	.+6      	; 0x484 <read_temp+0xa8>
     47e:	42 e0       	ldi	r20, 0x02	; 2
     480:	50 e4       	ldi	r21, 0x40	; 64
     482:	39 c0       	rjmp	.+114    	; 0x4f6 <read_temp+0x11a>
		return 0x8000; 
	}
//	TWDR = cmd; /* Temp address to Command Reg*/
    TWCR = TWI_TWINT | TWI_ENABLE | TWI_ACKEN;
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT))
     484:	80 91 74 00 	lds	r24, 0x0074
     488:	87 ff       	sbrs	r24, 7
     48a:	ef cf       	rjmp	.-34     	; 0x46a <read_temp+0x8e>
	{
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4002;
	}; /* wait Start condition sent */
  	if((TWSR & TWI_STATUS_MASK) != MR_DATA_ACK) 
     48c:	80 91 71 00 	lds	r24, 0x0071
     490:	88 7f       	andi	r24, 0xF8	; 248
     492:	80 35       	cpi	r24, 0x50	; 80
     494:	f1 f4       	brne	.+60     	; 0x4d2 <read_temp+0xf6>
	{
	    /* No ack flag */
		return 0x8000; 
	}  
    data = TWDR << 8;
     496:	40 91 73 00 	lds	r20, 0x0073
	TWCR = TWI_TWINT | TWI_ENABLE; /* SLA ACK not transmitted at last byte */
     49a:	84 e8       	ldi	r24, 0x84	; 132
     49c:	80 93 74 00 	sts	0x0074, r24
	loop_cnt = 0;
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <read_temp+0xe4>
	while(!(TWCR & TWI_TWINT)){
		loop_cnt ++;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	9a 83       	std	Y+2, r25	; 0x02
     4ae:	89 83       	std	Y+1, r24	; 0x01
		if(loop_cnt >= 0x1000) return 0x4003;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	80 50       	subi	r24, 0x00	; 0
     4b6:	90 41       	sbci	r25, 0x10	; 16
     4b8:	18 f0       	brcs	.+6      	; 0x4c0 <read_temp+0xe4>
     4ba:	43 e0       	ldi	r20, 0x03	; 3
     4bc:	50 e4       	ldi	r21, 0x40	; 64
     4be:	1b c0       	rjmp	.+54     	; 0x4f6 <read_temp+0x11a>
		return 0x8000; 
	}  
    data = TWDR << 8;
	TWCR = TWI_TWINT | TWI_ENABLE; /* SLA ACK not transmitted at last byte */
	loop_cnt = 0;
	while(!(TWCR & TWI_TWINT)){
     4c0:	80 91 74 00 	lds	r24, 0x0074
     4c4:	87 ff       	sbrs	r24, 7
     4c6:	ef cf       	rjmp	.-34     	; 0x4a6 <read_temp+0xca>
		loop_cnt ++;
		if(loop_cnt >= 0x1000) return 0x4003;
	}; /* wait Start condition sent */
  	if((TWSR & TWI_STATUS_MASK) != MR_DATA_NACK) 
     4c8:	80 91 71 00 	lds	r24, 0x0071
     4cc:	88 7f       	andi	r24, 0xF8	; 248
     4ce:	88 35       	cpi	r24, 0x58	; 88
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <read_temp+0xfc>
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e8       	ldi	r21, 0x80	; 128
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <read_temp+0x11a>
	{
	    /* No ack flag */
		return 0x8000; 
	}
	data |= TWDR;
     4d8:	80 91 73 00 	lds	r24, 0x0073
  	if((TWSR & TWI_STATUS_MASK) != MR_DATA_ACK) 
	{
	    /* No ack flag */
		return 0x8000; 
	}  
    data = TWDR << 8;
     4dc:	34 2f       	mov	r19, r20
     4de:	20 e0       	ldi	r18, 0x00	; 0
	{
	    /* No ack flag */
		return 0x8000; 
	}
	data |= TWDR;
	TWCR = TWI_TWINT | TWI_ENABLE | TWI_STOP;
     4e0:	94 e9       	ldi	r25, 0x94	; 148
     4e2:	90 93 74 00 	sts	0x0074, r25
	/* 9 bit defaults */
	return data >> 7;
     4e6:	48 2f       	mov	r20, r24
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	42 2b       	or	r20, r18
     4ec:	53 2b       	or	r21, r19
     4ee:	44 0f       	add	r20, r20
     4f0:	45 2f       	mov	r20, r21
     4f2:	44 1f       	adc	r20, r20
     4f4:	55 0b       	sbc	r21, r21
}
     4f6:	ca 01       	movw	r24, r20
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <init_adc>:
 * Per ADC channel conv time   =  6.500000 uS
 *--------------------------------------------------------------
 */
void init_adc(void)
{
	ADMUX = ADC_AREF;
     502:	17 b8       	out	0x07, r1	; 7
	ADCSRA = ADC_EN | ADC_CLK_DIV_4;
     504:	82 e8       	ldi	r24, 0x82	; 130
     506:	86 b9       	out	0x06, r24	; 6
}
     508:	08 95       	ret

0000050a <get_adc_value>:
unsigned int get_adc_value(UINT8 ch)
{
	UINT8	i,adcl;
	UINT16	v;
	ADMUX &= ~0x1F;
     50a:	97 b1       	in	r25, 0x07	; 7
     50c:	90 7e       	andi	r25, 0xE0	; 224
     50e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (ch & 0x7);
     510:	97 b1       	in	r25, 0x07	; 7
     512:	87 70       	andi	r24, 0x07	; 7
     514:	89 2b       	or	r24, r25
     516:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     518:	36 9a       	sbi	0x06, 6	; 6
	while( !(ADCSRA & (1 << ADIF))); 
     51a:	34 9b       	sbis	0x06, 4	; 6
     51c:	fe cf       	rjmp	.-4      	; 0x51a <get_adc_value+0x10>
	adcl = ADCL;
     51e:	24 b1       	in	r18, 0x04	; 4
	v = (ADCH << 8) | adcl;
     520:	45 b1       	in	r20, 0x05	; 5
     522:	94 2f       	mov	r25, r20
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	28 2b       	or	r18, r24
     52a:	39 2b       	or	r19, r25
	return v;
}
     52c:	c9 01       	movw	r24, r18
     52e:	08 95       	ret

00000530 <set_tone>:
};

void set_tone(unsigned char t_index)
{
   
    TCCR0 = TCCR0 & ~7; /* STOP the TIMER0 */ 
     530:	93 b7       	in	r25, 0x33	; 51
     532:	98 7f       	andi	r25, 0xF8	; 248
     534:	93 bf       	out	0x33, r25	; 51
	TCNT0 = 0;
     536:	12 be       	out	0x32, r1	; 50
    if(tone_tbl[t_index].prescale == 64)
     538:	a8 2f       	mov	r26, r24
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	fd 01       	movw	r30, r26
     53e:	ee 0f       	add	r30, r30
     540:	ff 1f       	adc	r31, r31
     542:	ef 53       	subi	r30, 0x3F	; 63
     544:	fc 4f       	sbci	r31, 0xFC	; 252
     546:	80 81       	ld	r24, Z
     548:	80 34       	cpi	r24, 0x40	; 64
     54a:	19 f4       	brne	.+6      	; 0x552 <set_tone+0x22>
	{
	    TCCR0 |=  5; // 4;  
     54c:	83 b7       	in	r24, 0x33	; 51
     54e:	85 60       	ori	r24, 0x05	; 5
     550:	02 c0       	rjmp	.+4      	; 0x556 <set_tone+0x26>
	}
	else /* presccaler = 32 */
	{
		TCCR0 |=  4; // 3;
     552:	83 b7       	in	r24, 0x33	; 51
     554:	84 60       	ori	r24, 0x04	; 4
     556:	83 bf       	out	0x33, r24	; 51
	}
	OCR0 = tone_tbl[t_index].ocr;
     558:	aa 0f       	add	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	af 53       	subi	r26, 0x3F	; 63
     55e:	bc 4f       	sbci	r27, 0xFC	; 252
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	8c 91       	ld	r24, X
     564:	81 bf       	out	0x31, r24	; 49
}
     566:	08 95       	ret

00000568 <tone_generator>:

void tone_generator(int ac, char *av[])
{
    UINT8 c;
    TCCR0 = (0 << COM01) | (1 << COM00) | ( 1 << WGM01) | (0 << WGM00) ;
     568:	88 e1       	ldi	r24, 0x18	; 24
     56a:	83 bf       	out	0x33, r24	; 51
	DDRB = 1 << 4;
     56c:	80 e1       	ldi	r24, 0x10	; 16
     56e:	87 bb       	out	0x17, r24	; 23
/*
 * Function tx_char without interrupt mode 
 */
UINT8 rx_char0(void)
{
 while(!(UCSR0A & (1 << RXC))); 
     570:	5f 9b       	sbis	0x0b, 7	; 11
     572:	fe cf       	rjmp	.-4      	; 0x570 <tone_generator+0x8>
 return UDR0 & 0xff;
     574:	8c b1       	in	r24, 0x0c	; 12
    TCCR0 = (0 << COM01) | (1 << COM00) | ( 1 << WGM01) | (0 << WGM00) ;
	DDRB = 1 << 4;
    while(1)
	{
	    c = rx_char0();
		if(c == 'q')
     576:	81 37       	cpi	r24, 0x71	; 113
     578:	11 f4       	brne	.+4      	; 0x57e <tone_generator+0x16>
		{
//		    TCCR0 &= ~7;
            TCCR0 = 0;
     57a:	13 be       	out	0x33, r1	; 51
		    break;
		}
		set_tone(c - 'a');
	}

}
     57c:	08 95       	ret
		{
//		    TCCR0 &= ~7;
            TCCR0 = 0;
		    break;
		}
		set_tone(c - 'a');
     57e:	81 56       	subi	r24, 0x61	; 97
     580:	0e 94 98 02 	call	0x530	; 0x530 <set_tone>
     584:	f5 cf       	rjmp	.-22     	; 0x570 <tone_generator+0x8>

00000586 <motor_test>:
void motor_test(int ac, char *av[])
{
    static UINT8 button1_state = 0;
	static UINT8 button2_state = 0;
	UINT8 forward = 0;
	PORTB = 7 << 5;   
     586:	80 ee       	ldi	r24, 0xE0	; 224
     588:	88 bb       	out	0x18, r24	; 24
     58a:	90 91 e6 03 	lds	r25, 0x03E6
     58e:	20 91 e7 03 	lds	r18, 0x03E7
     592:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
	    if(button1_state == 0 && !(PINE & ( 1 << 4)))
		{
		    button1_state = 1;
			PORTA ^= 1;
     594:	41 e0       	ldi	r20, 0x01	; 1
			if(forward)
			  PORTB = (0x2 << 6);
            else 
			  PORTB =  (0x1 << 6);
     596:	70 e4       	ldi	r23, 0x40	; 64
	    if(button1_state == 0 && !(PINE & ( 1 << 4)))
		{
		    button1_state = 1;
			PORTA ^= 1;
			if(forward)
			  PORTB = (0x2 << 6);
     598:	60 e8       	ldi	r22, 0x80	; 128
		    button1_state = 0;
		}
		if(button2_state == 0 && !(PINE & ( 1 << 5)))
		{
		    button2_state = 1;
			PORTA ^= 2;
     59a:	52 e0       	ldi	r21, 0x02	; 2
	static UINT8 button2_state = 0;
	UINT8 forward = 0;
	PORTB = 7 << 5;   
	while(1)
	{
	    if(button1_state == 0 && !(PINE & ( 1 << 4)))
     59c:	22 23       	and	r18, r18
     59e:	89 f4       	brne	.+34     	; 0x5c2 <motor_test+0x3c>
     5a0:	0c 99       	sbic	0x01, 4	; 1
     5a2:	13 c0       	rjmp	.+38     	; 0x5ca <motor_test+0x44>
		{
		    button1_state = 1;
			PORTA ^= 1;
     5a4:	8b b3       	in	r24, 0x1b	; 27
     5a6:	84 27       	eor	r24, r20
     5a8:	8b bb       	out	0x1b, r24	; 27
			if(forward)
     5aa:	33 23       	and	r19, r19
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <motor_test+0x2c>
			  PORTB = (0x2 << 6);
     5ae:	68 bb       	out	0x18, r22	; 24
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <motor_test+0x2e>
            else 
			  PORTB =  (0x1 << 6);
     5b2:	78 bb       	out	0x18, r23	; 24
            forward = !forward;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	33 23       	and	r19, r19
     5b8:	09 f4       	brne	.+2      	; 0x5bc <motor_test+0x36>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	38 2f       	mov	r19, r24
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <motor_test+0x44>
		}
		else if(button1_state == 1 && (PINE & ( 1 << 4)))
     5c2:	21 30       	cpi	r18, 0x01	; 1
     5c4:	11 f4       	brne	.+4      	; 0x5ca <motor_test+0x44>
     5c6:	0c 99       	sbic	0x01, 4	; 1
     5c8:	20 e0       	ldi	r18, 0x00	; 0
		{
		    button1_state = 0;
		}
		if(button2_state == 0 && !(PINE & ( 1 << 5)))
     5ca:	99 23       	and	r25, r25
     5cc:	39 f4       	brne	.+14     	; 0x5dc <motor_test+0x56>
     5ce:	0d 99       	sbic	0x01, 5	; 1
     5d0:	e5 cf       	rjmp	.-54     	; 0x59c <motor_test+0x16>
		{
		    button2_state = 1;
			PORTA ^= 2;
     5d2:	8b b3       	in	r24, 0x1b	; 27
     5d4:	85 27       	eor	r24, r21
     5d6:	8b bb       	out	0x1b, r24	; 27
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	e0 cf       	rjmp	.-64     	; 0x59c <motor_test+0x16>
		}
		else if(button2_state == 1 && (PINE & ( 1 << 5)))
     5dc:	91 30       	cpi	r25, 0x01	; 1
     5de:	f1 f6       	brne	.-68     	; 0x59c <motor_test+0x16>
     5e0:	81 b1       	in	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	e5 e0       	ldi	r30, 0x05	; 5
     5e6:	96 95       	lsr	r25
     5e8:	87 95       	ror	r24
     5ea:	ea 95       	dec	r30
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <motor_test+0x60>
     5ee:	98 2f       	mov	r25, r24
     5f0:	91 70       	andi	r25, 0x01	; 1
     5f2:	94 27       	eor	r25, r20
     5f4:	d3 cf       	rjmp	.-90     	; 0x59c <motor_test+0x16>

000005f6 <tohigh>:
UINT8 cmd_buf[1024];
UINT8 param_buf[16];


void tohigh(char *line)
{
     5f6:	fc 01       	movw	r30, r24
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <tohigh+0x12>
	while(*line) {
		if(*line >= 'a' && *line <= 'z')
     5fa:	89 2f       	mov	r24, r25
     5fc:	81 56       	subi	r24, 0x61	; 97
     5fe:	8a 31       	cpi	r24, 0x1A	; 26
     600:	10 f4       	brcc	.+4      	; 0x606 <tohigh+0x10>
			*line -= ' ';
     602:	90 52       	subi	r25, 0x20	; 32
     604:	90 83       	st	Z, r25
		line++;
     606:	31 96       	adiw	r30, 0x01	; 1
UINT8 param_buf[16];


void tohigh(char *line)
{
	while(*line) {
     608:	90 81       	ld	r25, Z
     60a:	99 23       	and	r25, r25
     60c:	b1 f7       	brne	.-20     	; 0x5fa <tohigh+0x4>
		if(*line >= 'a' && *line <= 'z')
			*line -= ' ';
		line++;
	}
}
     60e:	08 95       	ret

00000610 <hatoi>:
int hatoi(char *s)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
	register int	t, n = 0;
	tohigh(s);
     616:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <tohigh>
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	22 c0       	rjmp	.+68     	; 0x664 <hatoi+0x54>
	while ((t = *s) != 0) {	
		if (t >= '0' && t <= '9') {
     620:	9c 01       	movw	r18, r24
     622:	20 53       	subi	r18, 0x30	; 48
     624:	30 40       	sbci	r19, 0x00	; 0
     626:	2a 30       	cpi	r18, 0x0A	; 10
     628:	31 05       	cpc	r19, r1
     62a:	10 f4       	brcc	.+4      	; 0x630 <hatoi+0x20>
			t = t - '0';		
     62c:	c9 01       	movw	r24, r18
     62e:	12 c0       	rjmp	.+36     	; 0x654 <hatoi+0x44>
		} else {			
			t |= 0x20;
     630:	9c 01       	movw	r18, r24
     632:	20 62       	ori	r18, 0x20	; 32
			if(t >= 'a' && t <= 'f') t = t - 'a' + 10;
     634:	c9 01       	movw	r24, r18
     636:	81 56       	subi	r24, 0x61	; 97
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	06 97       	sbiw	r24, 0x06	; 6
     63c:	20 f4       	brcc	.+8      	; 0x646 <hatoi+0x36>
     63e:	c9 01       	movw	r24, r18
     640:	87 55       	subi	r24, 0x57	; 87
     642:	90 40       	sbci	r25, 0x00	; 0
     644:	07 c0       	rjmp	.+14     	; 0x654 <hatoi+0x44>
			else if(t >= 'A' && t <= 'F') t = t - 'A' + 10;
     646:	c9 01       	movw	r24, r18
     648:	81 54       	subi	r24, 0x41	; 65
     64a:	90 40       	sbci	r25, 0x00	; 0
     64c:	06 97       	sbiw	r24, 0x06	; 6
     64e:	70 f4       	brcc	.+28     	; 0x66c <hatoi+0x5c>
     650:	c9 01       	movw	r24, r18
     652:	c7 97       	sbiw	r24, 0x37	; 55
			else 	return(n);
		}	
		n = (n << 4) + t;
     654:	f4 e0       	ldi	r31, 0x04	; 4
     656:	44 0f       	add	r20, r20
     658:	55 1f       	adc	r21, r21
     65a:	fa 95       	dec	r31
     65c:	e1 f7       	brne	.-8      	; 0x656 <hatoi+0x46>
     65e:	48 0f       	add	r20, r24
     660:	59 1f       	adc	r21, r25
		s++;
     662:	21 96       	adiw	r28, 0x01	; 1
}
int hatoi(char *s)
{
	register int	t, n = 0;
	tohigh(s);
	while ((t = *s) != 0) {	
     664:	88 81       	ld	r24, Y
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	d1 f6       	brne	.-76     	; 0x620 <hatoi+0x10>
		}	
		n = (n << 4) + t;
		s++;
	}	
	return(n);
}
     66c:	ca 01       	movw	r24, r20
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <my_atoi>:

int my_atoi(char *s)
{
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
	register int	t, n = 0;
	tohigh(s);
     67a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <tohigh>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	13 c0       	rjmp	.+38     	; 0x6aa <my_atoi+0x36>
	while ((t = *s) != 0) {	
		if (t >= '0' && t <= '9') {
     684:	ca 01       	movw	r24, r20
     686:	c0 97       	sbiw	r24, 0x30	; 48
     688:	8a 30       	cpi	r24, 0x0A	; 10
     68a:	91 05       	cpc	r25, r1
     68c:	08 f4       	brcc	.+2      	; 0x690 <my_atoi+0x1c>
			t = t - '0';		
     68e:	ac 01       	movw	r20, r24
		} 
		n = (n * 10) + t;
     690:	c9 01       	movw	r24, r18
     692:	b3 e0       	ldi	r27, 0x03	; 3
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	ba 95       	dec	r27
     69a:	e1 f7       	brne	.-8      	; 0x694 <my_atoi+0x20>
     69c:	22 0f       	add	r18, r18
     69e:	33 1f       	adc	r19, r19
     6a0:	28 0f       	add	r18, r24
     6a2:	39 1f       	adc	r19, r25
     6a4:	24 0f       	add	r18, r20
     6a6:	35 1f       	adc	r19, r21
		s++;
     6a8:	21 96       	adiw	r28, 0x01	; 1

int my_atoi(char *s)
{
	register int	t, n = 0;
	tohigh(s);
	while ((t = *s) != 0) {	
     6aa:	88 81       	ld	r24, Y
     6ac:	48 2f       	mov	r20, r24
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	41 15       	cp	r20, r1
     6b2:	51 05       	cpc	r21, r1
     6b4:	39 f7       	brne	.-50     	; 0x684 <my_atoi+0x10>
		} 
		n = (n * 10) + t;
		s++;
	}	
	return(n);
}
     6b6:	c9 01       	movw	r24, r18
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <h_atoi>:

h_atoi(char *s)
{
     6be:	fc 01       	movw	r30, r24
	if(s[0] == '0' && s[1] == 'x') return hatoi(s+2);
     6c0:	80 81       	ld	r24, Z
     6c2:	80 33       	cpi	r24, 0x30	; 48
     6c4:	41 f4       	brne	.+16     	; 0x6d6 <h_atoi+0x18>
     6c6:	81 81       	ldd	r24, Z+1	; 0x01
     6c8:	88 37       	cpi	r24, 0x78	; 120
     6ca:	29 f4       	brne	.+10     	; 0x6d6 <h_atoi+0x18>
     6cc:	cf 01       	movw	r24, r30
     6ce:	02 96       	adiw	r24, 0x02	; 2
     6d0:	0e 94 08 03 	call	0x610	; 0x610 <hatoi>
     6d4:	08 95       	ret
	return my_atoi(s);
     6d6:	cf 01       	movw	r24, r30
     6d8:	0e 94 3a 03 	call	0x674	; 0x674 <my_atoi>
}
     6dc:	08 95       	ret

000006de <delay_us>:

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     6de:	42 b7       	in	r20, 0x32	; 50
	delay = 16 * v;
     6e0:	9c 01       	movw	r18, r24
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	22 0f       	add	r18, r18
     6e6:	33 1f       	adc	r19, r19
     6e8:	8a 95       	dec	r24
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <delay_us+0x6>
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <delay_us+0x1c>
	while(delay > 0)
	{
	    next = TCNT0;
     6ee:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     6f0:	89 2f       	mov	r24, r25
     6f2:	84 1b       	sub	r24, r20
     6f4:	28 1b       	sub	r18, r24
     6f6:	31 09       	sbc	r19, r1
     6f8:	49 2f       	mov	r20, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     6fa:	12 16       	cp	r1, r18
     6fc:	13 06       	cpc	r1, r19
     6fe:	bc f3       	brlt	.-18     	; 0x6ee <delay_us+0x10>
	    next = TCNT0;
		delay -= (next - cur) & 0xff;
		cur = next;
	}
	return cur;
}
     700:	84 2f       	mov	r24, r20
     702:	08 95       	ret

00000704 <LCD_write_ram>:
			}
		}
	}
}
void LCD_write_ram(unsigned int v, unsigned  int num)
{
     704:	48 2f       	mov	r20, r24
    unsigned int i;
//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
//    PORTB = PORTB & ~(LCD_RS | LCD_nCS);
    CLR_CS();
     706:	c7 98       	cbi	0x18, 7	; 24
	CLR_RS();
     708:	c6 98       	cbi	0x18, 6	; 24
    OUT16(0x22);
     70a:	15 ba       	out	0x15, r1	; 21
     70c:	82 e2       	ldi	r24, 0x22	; 34
     70e:	8b bb       	out	0x1b, r24	; 27

	CLR_WR();
     710:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     712:	c5 9a       	sbi	0x18, 5	; 24
    HIGH_RS();
     714:	c6 9a       	sbi	0x18, 6	; 24

	for( i = 0 ; i < num ; i ++)
	{
	    OUT16(v);
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	06 c0       	rjmp	.+12     	; 0x728 <LCD_write_ram+0x24>

	CLR_WR();
	HIGH_WR();
    HIGH_RS();

	for( i = 0 ; i < num ; i ++)
     71c:	95 bb       	out	0x15, r25	; 21
	{
	    OUT16(v);
     71e:	4b bb       	out	0x1b, r20	; 27
		CLR_WR();
     720:	c5 98       	cbi	0x18, 5	; 24
		HIGH_WR();
     722:	c5 9a       	sbi	0x18, 5	; 24

	CLR_WR();
	HIGH_WR();
    HIGH_RS();

	for( i = 0 ; i < num ; i ++)
     724:	2f 5f       	subi	r18, 0xFF	; 255
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	26 17       	cp	r18, r22
     72a:	37 07       	cpc	r19, r23
     72c:	b8 f3       	brcs	.-18     	; 0x71c <LCD_write_ram+0x18>
	{
	    OUT16(v);
		CLR_WR();
		HIGH_WR();
	}
	HIGH_CS();
     72e:	c7 9a       	sbi	0x18, 7	; 24
}
     730:	08 95       	ret

00000732 <LCD_write_reg>:

void LCD_write_reg(unsigned int addr, unsigned int v)
{
	CLR_CS();
     732:	c7 98       	cbi	0x18, 7	; 24
	OUT16(addr);
     734:	95 bb       	out	0x15, r25	; 21
     736:	8b bb       	out	0x1b, r24	; 27
	CLR_RS();
     738:	c6 98       	cbi	0x18, 6	; 24
	CLR_WR();
     73a:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     73c:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_RS();
     73e:	c6 9a       	sbi	0x18, 6	; 24

	OUT16(v);
     740:	75 bb       	out	0x15, r23	; 21
     742:	6b bb       	out	0x1b, r22	; 27
	CLR_WR();
     744:	c5 98       	cbi	0x18, 5	; 24
	HIGH_WR();
     746:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_CS();
     748:	c7 9a       	sbi	0x18, 7	; 24


}
     74a:	08 95       	ret

0000074c <LCD_read_reg>:


unsigned char LCD_read_reg(unsigned int addr)
{
    unsigned char v;
    CLR_CS();
     74c:	c7 98       	cbi	0x18, 7	; 24
	OUT16(addr);
     74e:	95 bb       	out	0x15, r25	; 21
     750:	8b bb       	out	0x1b, r24	; 27
	CLR_RS();
     752:	c6 98       	cbi	0x18, 6	; 24
	CLR_WR();
     754:	c5 98       	cbi	0x18, 5	; 24
//delay_ms(1);
	HIGH_WR();
     756:	c5 9a       	sbi	0x18, 5	; 24
	HIGH_RS();
     758:	c6 9a       	sbi	0x18, 6	; 24
	BUS_INPUT();
     75a:	14 ba       	out	0x14, r1	; 20
     75c:	1a ba       	out	0x1a, r1	; 26
	CLR_RD();
     75e:	c4 98       	cbi	0x18, 4	; 24

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     760:	82 b7       	in	r24, 0x32	; 50
     762:	20 e1       	ldi	r18, 0x10	; 16
     764:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
	    next = TCNT0;
     766:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     768:	49 2f       	mov	r20, r25
     76a:	48 1b       	sub	r20, r24
     76c:	24 1b       	sub	r18, r20
     76e:	31 09       	sbc	r19, r1
     770:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     772:	12 16       	cp	r1, r18
     774:	13 06       	cpc	r1, r19
     776:	bc f3       	brlt	.-18     	; 0x766 <LCD_read_reg+0x1a>
	HIGH_WR();
	HIGH_RS();
	BUS_INPUT();
	CLR_RD();
	delay_us(1);
	v = PINA; // dummy read 
     778:	89 b3       	in	r24, 0x19	; 25
	HIGH_RD();
     77a:	c4 9a       	sbi	0x18, 4	; 24
//	delay_ms(1);
	CLR_RD();
     77c:	c4 98       	cbi	0x18, 4	; 24

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     77e:	82 b7       	in	r24, 0x32	; 50
     780:	20 e1       	ldi	r18, 0x10	; 16
     782:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
	    next = TCNT0;
     784:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     786:	49 2f       	mov	r20, r25
     788:	48 1b       	sub	r20, r24
     78a:	24 1b       	sub	r18, r20
     78c:	31 09       	sbc	r19, r1
     78e:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     790:	12 16       	cp	r1, r18
     792:	13 06       	cpc	r1, r19
     794:	bc f3       	brlt	.-18     	; 0x784 <LCD_read_reg+0x38>
	v = PINA; // dummy read 
	HIGH_RD();
//	delay_ms(1);
	CLR_RD();
delay_us(1);
	v = PINA;
     796:	89 b3       	in	r24, 0x19	; 25
	HIGH_RD();
     798:	c4 9a       	sbi	0x18, 4	; 24
	HIGH_CS();
     79a:	c7 9a       	sbi	0x18, 7	; 24
	BUS_OUTPUT();
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	94 bb       	out	0x14, r25	; 20
     7a0:	9a bb       	out	0x1a, r25	; 26
	return v;
}
     7a2:	08 95       	ret

000007a4 <LCD_set_region>:

LCD_set_region(unsigned char sx, unsigned char sy, unsigned char ex, unsigned char ey)
{
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	38 2f       	mov	r19, r24
     7ac:	06 2f       	mov	r16, r22
     7ae:	14 2f       	mov	r17, r20
     7b0:	f2 2e       	mov	r15, r18
    LCD_write_reg(0x3, sx);
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	63 2f       	mov	r22, r19
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
	LCD_write_reg(0x5, ex);
     7be:	85 e0       	ldi	r24, 0x05	; 5
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	61 2f       	mov	r22, r17
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
	LCD_write_reg(0x7, sy);
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	60 2f       	mov	r22, r16
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
	LCD_write_reg(0x9, ey);
     7d6:	89 e0       	ldi	r24, 0x09	; 9
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	6f 2d       	mov	r22, r15
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
}
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	08 95       	ret

000007ea <init_lcd>:

init_lcd()
{
    int i,j;

    CLR_RESET();
     7ea:	95 98       	cbi	0x12, 5	; 18
    delay_ms(20);
     7ec:	84 e1       	ldi	r24, 0x14	; 20
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
	HIGH_RESET();
     7f4:	95 9a       	sbi	0x12, 5	; 18
 //   PORTD &= ~LCD_LED;
    
    delay_ms(20);
     7f6:	84 e1       	ldi	r24, 0x14	; 20
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>

    LCD_write_reg(0x60, 0x00);
     7fe:	80 e6       	ldi	r24, 0x60	; 96
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x61, 0x06);
     80a:	81 e6       	ldi	r24, 0x61	; 97
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	66 e0       	ldi	r22, 0x06	; 6
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x62, 0x00);
     816:	82 e6       	ldi	r24, 0x62	; 98
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x63, 0xd9);
     822:	83 e6       	ldi	r24, 0x63	; 99
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	69 ed       	ldi	r22, 0xD9	; 217
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x73, 0x70);
     82e:	83 e7       	ldi	r24, 0x73	; 115
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	60 e7       	ldi	r22, 0x70	; 112
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

    LCD_write_reg(0x40, 0x20);
     83a:	80 e4       	ldi	r24, 0x40	; 64
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	60 e2       	ldi	r22, 0x20	; 32
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x41, 0x41);
     846:	81 e4       	ldi	r24, 0x41	; 65
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	61 e4       	ldi	r22, 0x41	; 65
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x42, 0x41);
     852:	82 e4       	ldi	r24, 0x42	; 66
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	61 e4       	ldi	r22, 0x41	; 65
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x43, 0x01);
     85e:	83 e4       	ldi	r24, 0x43	; 67
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x44, 0x34);
     86a:	84 e4       	ldi	r24, 0x44	; 68
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	64 e3       	ldi	r22, 0x34	; 52
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x45, 0x02);
     876:	85 e4       	ldi	r24, 0x45	; 69
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x46, 0x08);
     882:	86 e4       	ldi	r24, 0x46	; 70
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	68 e0       	ldi	r22, 0x08	; 8
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x47, 0xd1);
     88e:	87 e4       	ldi	r24, 0x47	; 71
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	61 ed       	ldi	r22, 0xD1	; 209
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x48, 0x05);
     89a:	88 e4       	ldi	r24, 0x48	; 72
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	65 e0       	ldi	r22, 0x05	; 5
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x50, 0x67);
     8a6:	80 e5       	ldi	r24, 0x50	; 80
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	67 e6       	ldi	r22, 0x67	; 103
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x51, 0x00);
     8b2:	81 e5       	ldi	r24, 0x51	; 81
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x52, 0x27);
     8be:	82 e5       	ldi	r24, 0x52	; 82
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	67 e2       	ldi	r22, 0x27	; 39
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x53, 0x0b);
     8ca:	83 e5       	ldi	r24, 0x53	; 83
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	6b e0       	ldi	r22, 0x0B	; 11
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x54, 0x83);
     8d6:	84 e5       	ldi	r24, 0x54	; 84
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	63 e8       	ldi	r22, 0x83	; 131
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x55, 0x0e);
     8e2:	85 e5       	ldi	r24, 0x55	; 85
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	6e e0       	ldi	r22, 0x0E	; 14
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x56, 0x01);
     8ee:	86 e5       	ldi	r24, 0x56	; 86
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x57, 0x37);
     8fa:	87 e5       	ldi	r24, 0x57	; 87
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	67 e3       	ldi	r22, 0x37	; 55
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

    LCD_write_reg(0x1F, 0x03);
     906:	8f e1       	ldi	r24, 0x1F	; 31
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	63 e0       	ldi	r22, 0x03	; 3
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x20, 0x02);
     912:	80 e2       	ldi	r24, 0x20	; 32
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	62 e0       	ldi	r22, 0x02	; 2
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x24, 0x1C);
     91e:	84 e2       	ldi	r24, 0x24	; 36
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	6c e1       	ldi	r22, 0x1C	; 28
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x25, 0x34);
     92a:	85 e2       	ldi	r24, 0x25	; 37
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	64 e3       	ldi	r22, 0x34	; 52
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

    LCD_write_reg(0x23, 0x54);
     936:	83 e2       	ldi	r24, 0x23	; 35
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	64 e5       	ldi	r22, 0x54	; 84
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

    LCD_write_reg(0x18, 0x44);
     942:	88 e1       	ldi	r24, 0x18	; 24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	64 e4       	ldi	r22, 0x44	; 68
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x1B, 0x44);
     94e:	8b e1       	ldi	r24, 0x1B	; 27
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	64 e4       	ldi	r22, 0x44	; 68
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x21, 0x01);
     95a:	81 e2       	ldi	r24, 0x21	; 33
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x01, 0x00);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x1C, 0x03);
     972:	8c e1       	ldi	r24, 0x1C	; 28
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	63 e0       	ldi	r22, 0x03	; 3
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x19, 0x06);
     97e:	89 e1       	ldi	r24, 0x19	; 25
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	66 e0       	ldi	r22, 0x06	; 6
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    delay_ms(10);
     98a:	8a e0       	ldi	r24, 0x0A	; 10
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>

    LCD_write_reg(0x17, 0x05);
     992:	87 e1       	ldi	r24, 0x17	; 23
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	65 e0       	ldi	r22, 0x05	; 5
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x26, 0x84);
     99e:	86 e2       	ldi	r24, 0x26	; 38
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	64 e8       	ldi	r22, 0x84	; 132
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    delay_ms(80);
     9aa:	80 e5       	ldi	r24, 0x50	; 80
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
    LCD_write_reg(0x26, 0xB8);
     9b2:	86 e2       	ldi	r24, 0x26	; 38
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	68 eb       	ldi	r22, 0xB8	; 184
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    delay_ms(80);
     9be:	80 e5       	ldi	r24, 0x50	; 80
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
    LCD_write_reg(0x26, 0xBC);
     9c6:	86 e2       	ldi	r24, 0x26	; 38
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	6c eb       	ldi	r22, 0xBC	; 188
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

    LCD_write_reg(0x02, 0x00);
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x03, 0x00);
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x04, 0x00);
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x05, 220-1); /* x-axis */
     9f6:	85 e0       	ldi	r24, 0x05	; 5
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	6b ed       	ldi	r22, 0xDB	; 219
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
//    LCD_write_reg(0x05, 0xAF);
    LCD_write_reg(0x06, 0x00);
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x07, 0x00);
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x08, 0x00);
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x09, 176-1); /* y-axis */
     a26:	89 e0       	ldi	r24, 0x09	; 9
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	6f ea       	ldi	r22, 0xAF	; 175
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
//   LCD_write_reg(0x09, 0xDB);
/* X,Y coordinate redefine */
    LCD_write_reg(0x16, 0xA8);
     a32:	86 e1       	ldi	r24, 0x16	; 22
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	68 ea       	ldi	r22, 0xA8	; 168
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>

}
     a3e:	08 95       	ret

00000a40 <draw_ortho_line>:

void draw_ortho_line(unsigned int sX,unsigned int sY,unsigned int eX,unsigned int eY,unsigned int color)
{
     a40:	8f 92       	push	r8
     a42:	9f 92       	push	r9
     a44:	af 92       	push	r10
     a46:	bf 92       	push	r11
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	4c 01       	movw	r8, r24
     a56:	6b 01       	movw	r12, r22
     a58:	5a 01       	movw	r10, r20
     a5a:	79 01       	movw	r14, r18
    unsigned int num;
    LCD_write_reg(0x03, sX);
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	b4 01       	movw	r22, r8
     a62:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x05, eX);
     a66:	85 e0       	ldi	r24, 0x05	; 5
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	b5 01       	movw	r22, r10
     a6c:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x07, sY);
     a70:	87 e0       	ldi	r24, 0x07	; 7
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	b6 01       	movw	r22, r12
     a76:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    LCD_write_reg(0x09, eY);
     a7a:	89 e0       	ldi	r24, 0x09	; 9
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	b7 01       	movw	r22, r14
     a80:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
    num = (eX - sX + 1) * (eY - sY + 1);
//	delay_ms(4);
    LCD_write_ram(color,num);
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9c 01       	movw	r18, r24
     a8a:	2c 19       	sub	r18, r12
     a8c:	3d 09       	sbc	r19, r13
     a8e:	2e 0d       	add	r18, r14
     a90:	3f 1d       	adc	r19, r15
     a92:	88 19       	sub	r24, r8
     a94:	99 09       	sbc	r25, r9
     a96:	8a 0d       	add	r24, r10
     a98:	9b 1d       	adc	r25, r11
     a9a:	28 9f       	mul	r18, r24
     a9c:	b0 01       	movw	r22, r0
     a9e:	29 9f       	mul	r18, r25
     aa0:	70 0d       	add	r23, r0
     aa2:	38 9f       	mul	r19, r24
     aa4:	70 0d       	add	r23, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	c8 01       	movw	r24, r16
     aaa:	0e 94 82 03 	call	0x704	; 0x704 <LCD_write_ram>
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	08 95       	ret

00000ac4 <lcd_test>:
void init_adc(void);
unsigned int get_adc_value(unsigned char  ch);
unsigned int x_12bit, y_12bit;// x_12bit(0-4095), y_12bit(0-4095)
unsigned int x_touch, y_touch;// x_touch(0-239), y_touch(0-319)
void lcd_test(int ac, char *av[])
{
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17

    unsigned char v;
	int i;
    DDRA = 0xFF; /* PORT A input */
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; /* PORT C intput */
     acc:	84 bb       	out	0x14, r24	; 20

	DDRB = 0xff & ~(1 << 3) ; /* PORT B output ,MISO input(signal collison avoid*/
     ace:	87 ef       	ldi	r24, 0xF7	; 247
     ad0:	87 bb       	out	0x17, r24	; 23
	DDRD = (LCD_RESET | LCD_LED); /* Reset and LED is output pin */
     ad2:	80 e6       	ldi	r24, 0x60	; 96
     ad4:	81 bb       	out	0x11, r24	; 17
//	DDRD = (LCD_RESET | 0xe); /* Reset and LED is output pin */
    PORTB = 0xF0; /* MCU_nRD,MCU_nWR,LCD_RS, MCU_nCS all high */
     ad6:	80 ef       	ldi	r24, 0xF0	; 240
     ad8:	88 bb       	out	0x18, r24	; 24

    SFIOR |= PUD;
     ada:	80 b5       	in	r24, 0x20	; 32
     adc:	82 60       	ori	r24, 0x02	; 2
     ade:	80 bd       	out	0x20, r24	; 32
//	PORTD &= ~LCD_LED; /* LED all on */
	PORTD |= LCD_RESET | LCD_LED;  /* LCD reset */
     ae0:	82 b3       	in	r24, 0x12	; 18
     ae2:	80 66       	ori	r24, 0x60	; 96
     ae4:	82 bb       	out	0x12, r24	; 18

    TCNT0 = 0;
     ae6:	12 be       	out	0x32, r1	; 50
    TCCR0 = 1; /* not scale the clock */
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	83 bf       	out	0x33, r24	; 51
/* debug */


	init_lcd();
     aec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <init_lcd>
    PORTD  &= ~LCD_LED;
     af0:	96 98       	cbi	0x12, 6	; 18
  //  LCD_write_ram(RGB(0,255,0), 20000-1);

#if 1
	while(1)
	{
		draw_ortho_line(0,0,219,176,RGB(255,0,0));
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	4b ed       	ldi	r20, 0xDB	; 219
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	20 eb       	ldi	r18, 0xB0	; 176
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	18 ef       	ldi	r17, 0xF8	; 248
     b06:	0e 94 20 05 	call	0xa40	; 0xa40 <draw_ortho_line>
		delay_ms(1000);
     b0a:	88 ee       	ldi	r24, 0xE8	; 232
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
		draw_ortho_line(0,0,219,176,RGB(0,255,0));
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	4b ed       	ldi	r20, 0xDB	; 219
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	20 eb       	ldi	r18, 0xB0	; 176
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	00 ee       	ldi	r16, 0xE0	; 224
     b24:	17 e0       	ldi	r17, 0x07	; 7
     b26:	0e 94 20 05 	call	0xa40	; 0xa40 <draw_ortho_line>
		delay_ms(1000);
     b2a:	88 ee       	ldi	r24, 0xE8	; 232
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
		draw_ortho_line(0,0,219,176,RGB(0,0,255));
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	4b ed       	ldi	r20, 0xDB	; 219
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	20 eb       	ldi	r18, 0xB0	; 176
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	0f e1       	ldi	r16, 0x1F	; 31
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	0e 94 20 05 	call	0xa40	; 0xa40 <draw_ortho_line>
		delay_ms(1000);
     b4a:	88 ee       	ldi	r24, 0xE8	; 232
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <delay_ms>
     b52:	cf cf       	rjmp	.-98     	; 0xaf2 <lcd_test+0x2e>

00000b54 <SPI_write>:
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     b54:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
     b56:	77 9b       	sbis	0x0e, 7	; 14
     b58:	fe cf       	rjmp	.-4      	; 0xb56 <SPI_write+0x2>
	return SPDR;
     b5a:	8f b1       	in	r24, 0x0f	; 15
}
     b5c:	08 95       	ret

00000b5e <input_ads7846>:

unsigned int input_ads7846(unsigned char command)   /* input X, Y value from ADS7846 */
{
  unsigned int axis;

  PORTB &= ~1;
     b5e:	c0 98       	cbi	0x18, 0	; 24
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     b60:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & 0x80));
     b62:	77 9b       	sbis	0x0e, 7	; 14
     b64:	fe cf       	rjmp	.-4      	; 0xb62 <input_ads7846+0x4>
	return SPDR;
     b66:	8f b1       	in	r24, 0x0f	; 15
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     b68:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & 0x80));
     b6a:	77 9b       	sbis	0x0e, 7	; 14
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <input_ads7846+0xc>
	return SPDR;
     b6e:	9f b1       	in	r25, 0x0f	; 15
	input_ads7846(0);
}

unsigned char SPI_write(unsigned char data)
{
    SPDR = data;
     b70:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & 0x80));
     b72:	77 9b       	sbis	0x0e, 7	; 14
     b74:	fe cf       	rjmp	.-4      	; 0xb72 <input_ads7846+0x14>
	return SPDR;
     b76:	8f b1       	in	r24, 0x0f	; 15

  PORTB &= ~1;

  SPI_write(command);
  axis = SPI_write(0x00);                               // read high 7 bit
  axis <<= 8;
     b78:	39 2f       	mov	r19, r25
     b7a:	20 e0       	ldi	r18, 0x00	; 0
  axis += SPI_write(0x00);                             // read low 5 bit
     b7c:	28 0f       	add	r18, r24
     b7e:	31 1d       	adc	r19, r1
  axis >>= 3;

  PORTB |= 1;
     b80:	c0 9a       	sbi	0x18, 0	; 24
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	36 95       	lsr	r19
     b86:	27 95       	ror	r18
     b88:	9a 95       	dec	r25
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <input_ads7846+0x26>

  return axis;
}
     b8c:	c9 01       	movw	r24, r18
     b8e:	08 95       	ret

00000b90 <init_ads7846>:
}

unsigned int input_ads7846(unsigned char command);
void init_ads7846()
{
    DDRB |= 1; /* PB0 output for SPI SS */
     b90:	b8 9a       	sbi	0x17, 0	; 23
	SPCR = 0x51; /* 8 M / 16 = 500 Khz */
     b92:	81 e5       	ldi	r24, 0x51	; 81
     b94:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0;
     b96:	1e b8       	out	0x0e, r1	; 14
	input_ads7846(0);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	0e 94 af 05 	call	0xb5e	; 0xb5e <input_ads7846>
}
     b9e:	08 95       	ret

00000ba0 <Read_ADS7846_touch>:
//0b11010000              // 12-bit X position measurement command
#define ADS7846_CMD_Y   0x90
// 0b10010000              // 12-bit Y position measurement command

void Read_ADS7846_touch(void)                   /* read X, Y average value from ADS7846 */
{
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
  unsigned char i;

  x_12bit = 0;                                                 // initial value
     ba6:	10 92 58 09 	sts	0x0958, r1
     baa:	10 92 57 09 	sts	0x0957, r1
  y_12bit = 0;
     bae:	10 92 52 05 	sts	0x0552, r1
     bb2:	10 92 51 05 	sts	0x0551, r1
     bb6:	ff 24       	eor	r15, r15

  for(i = 0; i < 16; i++)                                     // read X, Y value by 16 times if -PENIRQ enable
    { if((PIND & TOUCH_PIN) == 0x00)                  // -PENIRQ = 0 ?
     bb8:	84 99       	sbic	0x10, 4	; 16
     bba:	39 c0       	rjmp	.+114    	; 0xc2e <Read_ADS7846_touch+0x8e>
        x_12bit += input_ads7846(ADS7846_CMD_X);// if yes, measure X position
     bbc:	00 91 57 09 	lds	r16, 0x0957
     bc0:	10 91 58 09 	lds	r17, 0x0958
     bc4:	80 ed       	ldi	r24, 0xD0	; 208
     bc6:	0e 94 af 05 	call	0xb5e	; 0xb5e <input_ads7846>
     bca:	08 0f       	add	r16, r24
     bcc:	19 1f       	adc	r17, r25
     bce:	10 93 58 09 	sts	0x0958, r17
     bd2:	00 93 57 09 	sts	0x0957, r16

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     bd6:	82 b7       	in	r24, 0x32	; 50
     bd8:	20 ea       	ldi	r18, 0xA0	; 160
     bda:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
	    next = TCNT0;
     bdc:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     bde:	49 2f       	mov	r20, r25
     be0:	48 1b       	sub	r20, r24
     be2:	24 1b       	sub	r18, r20
     be4:	31 09       	sbc	r19, r1
     be6:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     be8:	12 16       	cp	r1, r18
     bea:	13 06       	cpc	r1, r19
     bec:	bc f3       	brlt	.-18     	; 0xbdc <Read_ADS7846_touch+0x3c>
           y_12bit = 0;
           break;
        }
      delay_us(10);

      if((PIND & TOUCH_PIN) == 0x00)                   // -PENIRQ = 0 ?
     bee:	84 99       	sbic	0x10, 4	; 16
     bf0:	1e c0       	rjmp	.+60     	; 0xc2e <Read_ADS7846_touch+0x8e>
        y_12bit += input_ads7846(ADS7846_CMD_Y);// if yes, measure Y position
     bf2:	00 91 51 05 	lds	r16, 0x0551
     bf6:	10 91 52 05 	lds	r17, 0x0552
     bfa:	80 e9       	ldi	r24, 0x90	; 144
     bfc:	0e 94 af 05 	call	0xb5e	; 0xb5e <input_ads7846>
     c00:	08 0f       	add	r16, r24
     c02:	19 1f       	adc	r17, r25
     c04:	10 93 52 05 	sts	0x0552, r17
     c08:	00 93 51 05 	sts	0x0551, r16

unsigned char delay_us(int v)
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
     c0c:	82 b7       	in	r24, 0x32	; 50
     c0e:	20 ea       	ldi	r18, 0xA0	; 160
     c10:	30 e0       	ldi	r19, 0x00	; 0
	delay = 16 * v;
	while(delay > 0)
	{
	    next = TCNT0;
     c12:	92 b7       	in	r25, 0x32	; 50
		delay -= (next - cur) & 0xff;
     c14:	49 2f       	mov	r20, r25
     c16:	48 1b       	sub	r20, r24
     c18:	24 1b       	sub	r18, r20
     c1a:	31 09       	sbc	r19, r1
     c1c:	89 2f       	mov	r24, r25
{
    signed int delay;
	unsigned char cur,next;
	cur = TCNT0;
	delay = 16 * v;
	while(delay > 0)
     c1e:	12 16       	cp	r1, r18
     c20:	13 06       	cpc	r1, r19
     c22:	bc f3       	brlt	.-18     	; 0xc12 <Read_ADS7846_touch+0x72>
  unsigned char i;

  x_12bit = 0;                                                 // initial value
  y_12bit = 0;

  for(i = 0; i < 16; i++)                                     // read X, Y value by 16 times if -PENIRQ enable
     c24:	f3 94       	inc	r15
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	f8 16       	cp	r15, r24
     c2a:	31 f6       	brne	.-116    	; 0xbb8 <Read_ADS7846_touch+0x18>
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <Read_ADS7846_touch+0x9e>
      delay_us(10);

      if((PIND & TOUCH_PIN) == 0x00)                   // -PENIRQ = 0 ?
        y_12bit += input_ads7846(ADS7846_CMD_Y);// if yes, measure Y position
      else                                                      // if not, return with 0
        { x_12bit = 0;
     c2e:	10 92 58 09 	sts	0x0958, r1
     c32:	10 92 57 09 	sts	0x0957, r1
           y_12bit = 0;
     c36:	10 92 52 05 	sts	0x0552, r1
     c3a:	10 92 51 05 	sts	0x0551, r1
           break;
        }
      delay_us(10);
    }

  x_12bit >>= 4;                                             // calculate average for 16 times
     c3e:	80 91 57 09 	lds	r24, 0x0957
     c42:	90 91 58 09 	lds	r25, 0x0958
     c46:	34 e0       	ldi	r19, 0x04	; 4
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	3a 95       	dec	r19
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <Read_ADS7846_touch+0xa8>
     c50:	90 93 58 09 	sts	0x0958, r25
     c54:	80 93 57 09 	sts	0x0957, r24
  y_12bit >>= 4;
     c58:	80 91 51 05 	lds	r24, 0x0551
     c5c:	90 91 52 05 	lds	r25, 0x0552
     c60:	24 e0       	ldi	r18, 0x04	; 4
     c62:	96 95       	lsr	r25
     c64:	87 95       	ror	r24
     c66:	2a 95       	dec	r18
     c68:	e1 f7       	brne	.-8      	; 0xc62 <Read_ADS7846_touch+0xc2>
     c6a:	90 93 52 05 	sts	0x0552, r25
     c6e:	80 93 51 05 	sts	0x0551, r24
  else if(y_12bit >= y_touch_max)
    y_touch = 0;
  else
    y_touch = 319 - (unsigned int)((float)(y_12bit - y_touch_min) * 319./(float)(y_touch_max - y_touch_min));
#endif
}
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	08 95       	ret

00000c7a <pin_set>:
		}
	}
}

void pin_set(int ac, char *av[])
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	8b 01       	movw	r16, r22
    DDRB = (LCD_nRD | LCD_nWR | LCD_RS | LCD_nCS);
     c84:	20 ef       	ldi	r18, 0xF0	; 240
     c86:	27 bb       	out	0x17, r18	; 23
	DDRD = (LCD_RESET | LCD_LED);
     c88:	20 e6       	ldi	r18, 0x60	; 96
     c8a:	21 bb       	out	0x11, r18	; 17
    if(ac == 3)
     c8c:	03 97       	sbiw	r24, 0x03	; 3
     c8e:	09 f0       	breq	.+2      	; 0xc92 <pin_set+0x18>
     c90:	62 c0       	rjmp	.+196    	; 0xd56 <pin_set+0xdc>
	{
	    if(!strcmp(av[1],"reset"))
     c92:	fb 01       	movw	r30, r22
     c94:	c2 81       	ldd	r28, Z+2	; 0x02
     c96:	d3 81       	ldd	r29, Z+3	; 0x03
     c98:	ce 01       	movw	r24, r28
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	61 f4       	brne	.+24     	; 0xcbe <pin_set+0x44>
		{
		    if(!strcmp(av[2],"on"))
     ca6:	f8 01       	movw	r30, r16
     ca8:	84 81       	ldd	r24, Z+4	; 0x04
     caa:	95 81       	ldd	r25, Z+5	; 0x05
     cac:	66 e0       	ldi	r22, 0x06	; 6
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	11 f4       	brne	.+4      	; 0xcbc <pin_set+0x42>
			{
			    PORTD |= LCD_RESET;
     cb8:	95 9a       	sbi	0x12, 5	; 18
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <pin_set+0x44>
			}
			else
			{
			    PORTD &= ~LCD_RESET;
     cbc:	95 98       	cbi	0x12, 5	; 18
			}
		}
	    if(!strcmp(av[1],"rd"))
     cbe:	ce 01       	movw	r24, r28
     cc0:	69 e0       	ldi	r22, 0x09	; 9
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	61 f4       	brne	.+24     	; 0xce4 <pin_set+0x6a>
		{
		    if(!strcmp(av[2],"on"))
     ccc:	f8 01       	movw	r30, r16
     cce:	84 81       	ldd	r24, Z+4	; 0x04
     cd0:	95 81       	ldd	r25, Z+5	; 0x05
     cd2:	66 e0       	ldi	r22, 0x06	; 6
     cd4:	71 e0       	ldi	r23, 0x01	; 1
     cd6:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	11 f4       	brne	.+4      	; 0xce2 <pin_set+0x68>
			{
			    PORTB |= LCD_nRD;
     cde:	c4 9a       	sbi	0x18, 4	; 24
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <pin_set+0x6a>
			}
			else
			{
			    PORTB &= ~LCD_nRD;
     ce2:	c4 98       	cbi	0x18, 4	; 24
			}
		}
	    if(!strcmp(av[1],"wr"))
     ce4:	ce 01       	movw	r24, r28
     ce6:	6c e0       	ldi	r22, 0x0C	; 12
     ce8:	71 e0       	ldi	r23, 0x01	; 1
     cea:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	61 f4       	brne	.+24     	; 0xd0a <pin_set+0x90>
		{
		    if(!strcmp(av[2],"on"))
     cf2:	f8 01       	movw	r30, r16
     cf4:	84 81       	ldd	r24, Z+4	; 0x04
     cf6:	95 81       	ldd	r25, Z+5	; 0x05
     cf8:	66 e0       	ldi	r22, 0x06	; 6
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	11 f4       	brne	.+4      	; 0xd08 <pin_set+0x8e>
			{
			    PORTB |= LCD_nWR;
     d04:	c5 9a       	sbi	0x18, 5	; 24
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <pin_set+0x90>
			}
			else
			{
			    PORTB &= ~LCD_nWR;
     d08:	c5 98       	cbi	0x18, 5	; 24
			}
		}
	    if(!strcmp(av[1],"rs"))
     d0a:	ce 01       	movw	r24, r28
     d0c:	6f e0       	ldi	r22, 0x0F	; 15
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	61 f4       	brne	.+24     	; 0xd30 <pin_set+0xb6>
		{
		    if(!strcmp(av[2],"on"))
     d18:	f8 01       	movw	r30, r16
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	95 81       	ldd	r25, Z+5	; 0x05
     d1e:	66 e0       	ldi	r22, 0x06	; 6
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	11 f4       	brne	.+4      	; 0xd2e <pin_set+0xb4>
			{
			    PORTB |= LCD_RS;
     d2a:	c6 9a       	sbi	0x18, 6	; 24
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <pin_set+0xb6>
			}
			else
			{
			    PORTB &= ~LCD_RS;
     d2e:	c6 98       	cbi	0x18, 6	; 24
			}
		}
	    if(!strcmp(av[1],"cs"))
     d30:	ce 01       	movw	r24, r28
     d32:	62 e1       	ldi	r22, 0x12	; 18
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	61 f4       	brne	.+24     	; 0xd56 <pin_set+0xdc>
		{
		    if(!strcmp(av[2],"on"))
     d3e:	f8 01       	movw	r30, r16
     d40:	84 81       	ldd	r24, Z+4	; 0x04
     d42:	95 81       	ldd	r25, Z+5	; 0x05
     d44:	66 e0       	ldi	r22, 0x06	; 6
     d46:	71 e0       	ldi	r23, 0x01	; 1
     d48:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	11 f4       	brne	.+4      	; 0xd54 <pin_set+0xda>
			{
			    PORTB |= LCD_nCS;
     d50:	c7 9a       	sbi	0x18, 7	; 24
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <pin_set+0xdc>
			}
			else
			{
			    PORTB &= ~LCD_nCS;
     d54:	c7 98       	cbi	0x18, 7	; 24
			}
		}
	}
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <backlight>:
#define BUS_INPUT()   do {DDRC = 0; DDRA = 0; } while(0)
#define BUS_OUTPUT()   do {DDRC = 0xff; DDRA = 0xff; } while(0)


void backlight(int ac, char *av[])
{
     d60:	fb 01       	movw	r30, r22
    DDRD = LCD_LED;
     d62:	20 e4       	ldi	r18, 0x40	; 64
     d64:	21 bb       	out	0x11, r18	; 17
    if(ac == 2)
     d66:	02 97       	sbiw	r24, 0x02	; 2
     d68:	59 f4       	brne	.+22     	; 0xd80 <backlight+0x20>
	{
	    if(!strcmp(av[1],"on"))
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	66 e0       	ldi	r22, 0x06	; 6
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	11 f4       	brne	.+4      	; 0xd7e <backlight+0x1e>
		{
		    PORTD &= ~LCD_LED;
     d7a:	96 98       	cbi	0x12, 6	; 18
     d7c:	08 95       	ret
		}
		else
		{
		    PORTD |= LCD_LED;
     d7e:	96 9a       	sbi	0x12, 6	; 18
     d80:	08 95       	ret

00000d82 <button_test>:
	}

}

void button_test(int ac, char *av[])
{
     d82:	1f 93       	push	r17
		    c = rx_char0();
			if(c == 'q') break;
		}
	    if((button0_state == 0) && !(PINE & (1 << 4)))
		{
		    button0_state = 1;
     d84:	11 e0       	ldi	r17, 0x01	; 1
    static UINT8 button0_state = 0;
	static UINT8 button1_state = 0;
	UINT8 c;
	while(1)
	{
		if(UCSR0A & (1 << RXC)) {
     d86:	5f 9b       	sbis	0x0b, 7	; 11
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <button_test+0x12>
/*
 * Function tx_char without interrupt mode 
 */
UINT8 rx_char0(void)
{
 while(!(UCSR0A & (1 << RXC))); 
     d8a:	5f 9b       	sbis	0x0b, 7	; 11
     d8c:	fe cf       	rjmp	.-4      	; 0xd8a <button_test+0x8>
 return UDR0 & 0xff;
     d8e:	8c b1       	in	r24, 0x0c	; 12
	UINT8 c;
	while(1)
	{
		if(UCSR0A & (1 << RXC)) {
		    c = rx_char0();
			if(c == 'q') break;
     d90:	81 37       	cpi	r24, 0x71	; 113
     d92:	49 f1       	breq	.+82     	; 0xde6 <button_test+0x64>
		}
	    if((button0_state == 0) && !(PINE & (1 << 4)))
     d94:	80 91 e9 03 	lds	r24, 0x03E9
     d98:	88 23       	and	r24, r24
     d9a:	41 f4       	brne	.+16     	; 0xdac <button_test+0x2a>
     d9c:	0c 99       	sbic	0x01, 4	; 1
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <button_test+0x2a>
		{
		    button0_state = 1;
     da0:	10 93 e9 03 	sts	0x03E9, r17
			printf("B0 pushed\n");
     da4:	85 e1       	ldi	r24, 0x15	; 21
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
		}
	    if((button1_state == 0) && !(PINE & (1 << 5)))
     dac:	80 91 e8 03 	lds	r24, 0x03E8
     db0:	88 23       	and	r24, r24
     db2:	41 f4       	brne	.+16     	; 0xdc4 <button_test+0x42>
     db4:	0d 99       	sbic	0x01, 5	; 1
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <button_test+0x42>
		{
		    button1_state = 1;
     db8:	10 93 e8 03 	sts	0x03E8, r17
			printf("B1 pushed\n");
     dbc:	8f e1       	ldi	r24, 0x1F	; 31
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
		}
	    if((button0_state == 1) && (PINE & (1 << 4)))
     dc4:	80 91 e9 03 	lds	r24, 0x03E9
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	21 f4       	brne	.+8      	; 0xdd4 <button_test+0x52>
     dcc:	0c 9b       	sbis	0x01, 4	; 1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <button_test+0x52>
		{
		    button0_state = 0;
     dd0:	10 92 e9 03 	sts	0x03E9, r1
		}
	    if((button1_state == 1) && (PINE & (1 << 5)))
     dd4:	80 91 e8 03 	lds	r24, 0x03E8
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	a9 f6       	brne	.-86     	; 0xd86 <button_test+0x4>
     ddc:	0d 9b       	sbis	0x01, 5	; 1
     dde:	d3 cf       	rjmp	.-90     	; 0xd86 <button_test+0x4>
		{
		    button1_state = 0;
     de0:	10 92 e8 03 	sts	0x03E8, r1
     de4:	d0 cf       	rjmp	.-96     	; 0xd86 <button_test+0x4>
		}

	}
}
     de6:	1f 91       	pop	r17
     de8:	08 95       	ret

00000dea <fnd_test>:
    for(j = 0 ; j < delay ; j ++)
    for( i = 0 ; i < 0xffff ; i ++);

}
void fnd_test(int ac, char *av[])
{
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
    UINT8 i,digits;
    DDRC = 0xff;
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xf;
     df6:	8f e0       	ldi	r24, 0x0F	; 15
     df8:	80 93 64 00 	sts	0x0064, r24
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	10 e0       	ldi	r17, 0x00	; 0
	{
	    if((UCSR0A & (1 << RXC))) {
		    if(UDR0 == 'q') 
		    break;
		}
	    PORTG = 1 << digits;
     e00:	c1 e0       	ldi	r28, 0x01	; 1
     e02:	d0 e0       	ldi	r29, 0x00	; 0
    DDRC = 0xff;
	DDRG = 0xf;
	digits = 0;
	for( i = 0 ; i < 100 ; i ++)
	{
	    if((UCSR0A & (1 << RXC))) {
     e04:	5f 9b       	sbis	0x0b, 7	; 11
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <fnd_test+0x24>
		    if(UDR0 == 'q') 
     e08:	8c b1       	in	r24, 0x0c	; 12
     e0a:	81 37       	cpi	r24, 0x71	; 113
     e0c:	f1 f0       	breq	.+60     	; 0xe4a <fnd_test+0x60>
		    break;
		}
	    PORTG = 1 << digits;
     e0e:	ce 01       	movw	r24, r28
     e10:	01 2e       	mov	r0, r17
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <fnd_test+0x2e>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <fnd_test+0x2a>
     e1c:	80 93 65 00 	sts	0x0065, r24
	    PORTC = v_to_seg[i%10];
     e20:	80 2f       	mov	r24, r16
     e22:	6a e0       	ldi	r22, 0x0A	; 10
     e24:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodqi4>
     e28:	e9 2f       	mov	r30, r25
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	e9 54       	subi	r30, 0x49	; 73
     e2e:	fc 4f       	sbci	r31, 0xFC	; 252
     e30:	80 81       	ld	r24, Z
     e32:	85 bb       	out	0x15, r24	; 21
		my_delay(10);
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 b8 01 	call	0x370	; 0x370 <my_delay>
		digits++;
     e3c:	1f 5f       	subi	r17, 0xFF	; 255
		if(digits >= 4) digits = 0;
     e3e:	14 30       	cpi	r17, 0x04	; 4
     e40:	08 f0       	brcs	.+2      	; 0xe44 <fnd_test+0x5a>
     e42:	10 e0       	ldi	r17, 0x00	; 0
{
    UINT8 i,digits;
    DDRC = 0xff;
	DDRG = 0xf;
	digits = 0;
	for( i = 0 ; i < 100 ; i ++)
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	04 36       	cpi	r16, 0x64	; 100
     e48:	e9 f6       	brne	.-70     	; 0xe04 <fnd_test+0x1a>
	    PORTC = v_to_seg[i%10];
		my_delay(10);
		digits++;
		if(digits >= 4) digits = 0;
	}
	printf("end of fnd test\n");
     e4a:	89 e2       	ldi	r24, 0x29	; 41
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <read_light>:
 * Per ADC channel conv time   =  6.500000 uS
 *--------------------------------------------------------------
 */
void init_adc(void)
{
	ADMUX = ADC_AREF;
     e5c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = ADC_EN | ADC_CLK_DIV_4;
     e5e:	82 e8       	ldi	r24, 0x82	; 130
     e60:	86 b9       	out	0x06, r24	; 6
}

void read_light(int ac, char *av[])
{
    init_adc();
	printf("Light ADC = %d\n",get_adc_value(0));
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 85 02 	call	0x50a	; 0x50a <get_adc_value>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <read_light+0xe>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <read_light+0x10>
     e6c:	29 e3       	ldi	r18, 0x39	; 57
     e6e:	31 e0       	ldi	r19, 0x01	; 1
     e70:	ed b7       	in	r30, 0x3d	; 61
     e72:	fe b7       	in	r31, 0x3e	; 62
     e74:	32 83       	std	Z+2, r19	; 0x02
     e76:	21 83       	std	Z+1, r18	; 0x01
     e78:	94 83       	std	Z+4, r25	; 0x04
     e7a:	83 83       	std	Z+3, r24	; 0x03
     e7c:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
}
     e88:	08 95       	ret

00000e8a <read_temp_cmd>:

void read_temp_cmd(int ac, char *av[])
{
    int temp;

	init_i2c();
     e8a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_i2c>
	temp = read_temp();
     e8e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <read_temp>
     e92:	9c 01       	movw	r18, r24

    printf("TEMP = %d.%d\n\r",temp>>1,(temp & 1) ? 5 : 0);
     e94:	80 fd       	sbrc	r24, 0
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <read_temp_cmd+0x14>
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <read_temp_cmd+0x18>
     e9e:	45 e0       	ldi	r20, 0x05	; 5
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <read_temp_cmd+0x1a>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <read_temp_cmd+0x1c>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <read_temp_cmd+0x1e>
     ea8:	ed b7       	in	r30, 0x3d	; 61
     eaa:	fe b7       	in	r31, 0x3e	; 62
     eac:	31 96       	adiw	r30, 0x01	; 1
     eae:	89 e4       	ldi	r24, 0x49	; 73
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	ad b7       	in	r26, 0x3d	; 61
     eb4:	be b7       	in	r27, 0x3e	; 62
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	35 95       	asr	r19
     ec0:	27 95       	ror	r18
     ec2:	33 83       	std	Z+3, r19	; 0x03
     ec4:	22 83       	std	Z+2, r18	; 0x02
     ec6:	55 83       	std	Z+5, r21	; 0x05
     ec8:	44 83       	std	Z+4, r20	; 0x04
     eca:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
     ece:	8d b7       	in	r24, 0x3d	; 61
     ed0:	9e b7       	in	r25, 0x3e	; 62
     ed2:	06 96       	adiw	r24, 0x06	; 6
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	9e bf       	out	0x3e, r25	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	8d bf       	out	0x3d, r24	; 61

}
     ede:	08 95       	ret

00000ee0 <ms>:
		printf("LCD rd addr = %x data = %x\n",addr,data);
	}
}

void ms(int ac, char *av[])
{
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	eb 01       	movw	r28, r22
    unsigned int addr;
	unsigned int data;
    if(ac == 3)
     eee:	03 97       	sbiw	r24, 0x03	; 3
     ef0:	71 f5       	brne	.+92     	; 0xf4e <ms+0x6e>
	{
	    addr = h_atoi(av[1]);
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	0e 94 5f 03 	call	0x6be	; 0x6be <h_atoi>
     efa:	f8 2e       	mov	r15, r24
     efc:	e9 2e       	mov	r14, r25
		data = h_atoi(av[2]);
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	0e 94 5f 03 	call	0x6be	; 0x6be <h_atoi>
     f06:	18 2f       	mov	r17, r24
     f08:	09 2f       	mov	r16, r25
		LCD_write_reg(addr,data);
     f0a:	8f 2d       	mov	r24, r15
     f0c:	9e 2d       	mov	r25, r14
     f0e:	61 2f       	mov	r22, r17
     f10:	70 2f       	mov	r23, r16
     f12:	0e 94 99 03 	call	0x732	; 0x732 <LCD_write_reg>
		printf("LCD wr addr = %x data = %x\n",addr,data);
     f16:	00 d0       	rcall	.+0      	; 0xf18 <ms+0x38>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <ms+0x3a>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <ms+0x3c>
     f1c:	ed b7       	in	r30, 0x3d	; 61
     f1e:	fe b7       	in	r31, 0x3e	; 62
     f20:	31 96       	adiw	r30, 0x01	; 1
     f22:	88 e5       	ldi	r24, 0x58	; 88
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	ad b7       	in	r26, 0x3d	; 61
     f28:	be b7       	in	r27, 0x3e	; 62
     f2a:	12 96       	adiw	r26, 0x02	; 2
     f2c:	9c 93       	st	X, r25
     f2e:	8e 93       	st	-X, r24
     f30:	11 97       	sbiw	r26, 0x01	; 1
     f32:	f2 82       	std	Z+2, r15	; 0x02
     f34:	e3 82       	std	Z+3, r14	; 0x03
     f36:	14 83       	std	Z+4, r17	; 0x04
     f38:	05 83       	std	Z+5, r16	; 0x05
     f3a:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
     f3e:	8d b7       	in	r24, 0x3d	; 61
     f40:	9e b7       	in	r25, 0x3e	; 62
     f42:	06 96       	adiw	r24, 0x06	; 6
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	9e bf       	out	0x3e, r25	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	8d bf       	out	0x3d, r24	; 61
	}
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	08 95       	ret

00000f5c <md>:

void LCD_write_reg(unsigned int addr, unsigned int v);
unsigned char LCD_read_reg(unsigned int addr);

void md(int ac, char *av[])
{
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	fb 01       	movw	r30, r22
    unsigned int addr;
	unsigned char data;
    if(ac == 2)
     f62:	02 97       	sbiw	r24, 0x02	; 2
     f64:	21 f5       	brne	.+72     	; 0xfae <md+0x52>
	{
	    addr = h_atoi(av[1]);
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	0e 94 5f 03 	call	0x6be	; 0x6be <h_atoi>
     f6e:	18 2f       	mov	r17, r24
     f70:	09 2f       	mov	r16, r25
		data = LCD_read_reg(addr);
     f72:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_read_reg>
		printf("LCD rd addr = %x data = %x\n",addr,data);
     f76:	00 d0       	rcall	.+0      	; 0xf78 <md+0x1c>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <md+0x1e>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <md+0x20>
     f7c:	ed b7       	in	r30, 0x3d	; 61
     f7e:	fe b7       	in	r31, 0x3e	; 62
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	24 e7       	ldi	r18, 0x74	; 116
     f84:	31 e0       	ldi	r19, 0x01	; 1
     f86:	ad b7       	in	r26, 0x3d	; 61
     f88:	be b7       	in	r27, 0x3e	; 62
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	3c 93       	st	X, r19
     f8e:	2e 93       	st	-X, r18
     f90:	11 97       	sbiw	r26, 0x01	; 1
     f92:	12 83       	std	Z+2, r17	; 0x02
     f94:	03 83       	std	Z+3, r16	; 0x03
     f96:	84 83       	std	Z+4, r24	; 0x04
     f98:	15 82       	std	Z+5, r1	; 0x05
     f9a:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
     f9e:	8d b7       	in	r24, 0x3d	; 61
     fa0:	9e b7       	in	r25, 0x3e	; 62
     fa2:	06 96       	adiw	r24, 0x06	; 6
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	9e bf       	out	0x3e, r25	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	8d bf       	out	0x3d, r24	; 61
	}
}
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <help>:
	{"motor",motor_test,"MOTOR test"},
	{NULL,  NULL,NULL}
};

void help()
{
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
	int i,j;
	printf("--------------< Supported Commands >------------------\n");
     fc0:	80 e9       	ldi	r24, 0x90	; 144
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
	printf("  CMD            Description\n");
     fc8:	87 ec       	ldi	r24, 0xC7	; 199
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
	printf("------------------------------------------------------\n");
     fd0:	84 ee       	ldi	r24, 0xE4	; 228
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
     fd8:	03 e6       	ldi	r16, 0x63	; 99
     fda:	13 e0       	ldi	r17, 0x03	; 3
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
     fdc:	7a e0       	ldi	r23, 0x0A	; 10
     fde:	e7 2e       	mov	r14, r23
     fe0:	f1 2c       	mov	r15, r1
	printf("--------------< Supported Commands >------------------\n");
	printf("  CMD            Description\n");
	printf("------------------------------------------------------\n");
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
     fe2:	d8 01       	movw	r26, r16
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	89 2b       	or	r24, r25
     fea:	c1 f1       	breq	.+112    	; 0x105c <help+0xa8>
		JC_putchar(' ');
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
		JC_putString(cmd_tbl[i].cmd);
     ff2:	f8 01       	movw	r30, r16
     ff4:	c0 81       	ld	r28, Z
     ff6:	d1 81       	ldd	r29, Z+1	; 0x01
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <help+0x4c>
	JC_putchar(c);
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
     ffa:	21 96       	adiw	r28, 0x01	; 1
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
     ffc:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    1000:	88 81       	ld	r24, Y
    1002:	88 23       	and	r24, r24
    1004:	d1 f7       	brne	.-12     	; 0xffa <help+0x46>
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	d0 e0       	ldi	r29, 0x00	; 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <help+0x60>
	for(i=0;;i++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	d8 01       	movw	r26, r16
    1016:	ec 91       	ld	r30, X
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	fc 91       	ld	r31, X
    101c:	df 01       	movw	r26, r30
    101e:	0d 90       	ld	r0, X+
    1020:	00 20       	and	r0, r0
    1022:	e9 f7       	brne	.-6      	; 0x101e <help+0x6a>
    1024:	11 97       	sbiw	r26, 0x01	; 1
    1026:	ae 1b       	sub	r26, r30
    1028:	bf 0b       	sbc	r27, r31
    102a:	c7 01       	movw	r24, r14
    102c:	8a 1b       	sub	r24, r26
    102e:	9b 0b       	sbc	r25, r27
    1030:	c8 17       	cp	r28, r24
    1032:	d9 07       	cpc	r29, r25
    1034:	58 f3       	brcs	.-42     	; 0x100c <help+0x58>
		JC_putString(cmd_tbl[i].usage);JC_putchar('\n');JC_putchar('\r');
    1036:	f8 01       	movw	r30, r16
    1038:	c4 81       	ldd	r28, Z+4	; 0x04
    103a:	d5 81       	ldd	r29, Z+5	; 0x05
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <help+0x90>
	JC_putchar(c);
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    103e:	21 96       	adiw	r28, 0x01	; 1
	return c;		
}

static int JC_putChar(char c)
{
	JC_putchar(c);
    1040:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
}

static void JC_putString(char *s)
{
	while(*s) JC_putChar(*s++);
    1044:	88 81       	ld	r24, Y
    1046:	88 23       	and	r24, r24
    1048:	d1 f7       	brne	.-12     	; 0x103e <help+0x8a>
	{
		if(cmd_tbl[i].cmd == NULL) break;
		JC_putchar(' ');
		JC_putString(cmd_tbl[i].cmd);
		for( j = 0 ; j < 10 - strlen(cmd_tbl[i].cmd) ; j ++) JC_putchar(' ');
		JC_putString(cmd_tbl[i].usage);JC_putchar('\n');JC_putchar('\r');
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    1050:	8d e0       	ldi	r24, 0x0D	; 13
    1052:	0e 94 0f 01 	call	0x21e	; 0x21e <my_putchar>
    1056:	0a 5f       	subi	r16, 0xFA	; 250
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	c3 cf       	rjmp	.-122    	; 0xfe2 <help+0x2e>
	}
	printf("------------------------------------------------------\n");
    105c:	84 ee       	ldi	r24, 0xE4	; 228
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 35 09 	call	0x126a	; 0x126a <puts>
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <get_args>:
#define MAX_ARGS_LEN 20
#define JC_strcpy	strcpy
#define JC_strcmp	strcmp

int get_args(char *buf, char *av[])
{
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	5c 01       	movw	r10, r24
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	01 e0       	ldi	r16, 0x01	; 1
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <get_args+0x32>
    109a:	08 94       	sec
    109c:	e1 1c       	adc	r14, r1
    109e:	f1 1c       	adc	r15, r1
    10a0:	0f 5f       	subi	r16, 0xFF	; 255
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	98 01       	movw	r18, r16
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	30 40       	sbci	r19, 0x00	; 0
	int	num, start, end;
	start = end = num = 0;
	while (1)
	{
//printf("start=%d end=%d buf[end]=%x num=%d\n",start,end,buf[end],num);
		if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
    10aa:	f7 01       	movw	r30, r14
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	21 f0       	breq	.+8      	; 0x10ba <get_args+0x48>
    10b2:	8a 30       	cpi	r24, 0x0A	; 10
    10b4:	11 f0       	breq	.+4      	; 0x10ba <get_args+0x48>
    10b6:	8d 30       	cpi	r24, 0x0D	; 13
    10b8:	11 f5       	brne	.+68     	; 0x10fe <get_args+0x8c>
    10ba:	fe 01       	movw	r30, r28
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
		{
			if(start != end)
    10c0:	62 17       	cp	r22, r18
    10c2:	73 07       	cpc	r23, r19
    10c4:	61 f0       	breq	.+24     	; 0x10de <get_args+0x6c>
			{
				JC_strcpy(av[num],buf+start);
    10c6:	ec 0d       	add	r30, r12
    10c8:	fd 1d       	adc	r31, r13
    10ca:	6a 0d       	add	r22, r10
    10cc:	7b 1d       	adc	r23, r11
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	0e 94 1c 09 	call	0x1238	; 0x1238 <strcpy>
				num ++;
    10d6:	21 96       	adiw	r28, 0x01	; 1
				av[num] = 0;
    10d8:	fe 01       	movw	r30, r28
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
				return num;
			}
			else
			{
				av[num] = 0;
    10de:	ec 0d       	add	r30, r12
    10e0:	fd 1d       	adc	r31, r13
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
			end ++;
			start = end ;
		}
	}
	return 0;
}
    10e6:	ce 01       	movw	r24, r28
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret
			{
				av[num] = 0;
				return num;
			}
		} 
		if(buf[end] != ' ' && buf[end] != '\t' ) {
    10fe:	80 32       	cpi	r24, 0x20	; 32
    1100:	11 f0       	breq	.+4      	; 0x1106 <__stack+0x7>
    1102:	89 30       	cpi	r24, 0x09	; 9
    1104:	51 f6       	brne	.-108    	; 0x109a <get_args+0x28>
			end ++;
		}
		else
		{
			buf[end] = 0;
    1106:	f7 01       	movw	r30, r14
    1108:	10 82       	st	Z, r1
			JC_strcpy(av[num],buf+start);
    110a:	fe 01       	movw	r30, r28
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ec 0d       	add	r30, r12
    1112:	fd 1d       	adc	r31, r13
    1114:	6a 0d       	add	r22, r10
    1116:	7b 1d       	adc	r23, r11
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	0e 94 1c 09 	call	0x1238	; 0x1238 <strcpy>
			num ++;
    1120:	21 96       	adiw	r28, 0x01	; 1
    1122:	b8 01       	movw	r22, r16
    1124:	ba cf       	rjmp	.-140    	; 0x109a <get_args+0x28>

00001126 <exec_cmd>:
	return my_atoi(s);
}


void exec_cmd()
{
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	ea ee       	ldi	r30, 0xEA	; 234
    1130:	f3 e0       	ldi	r31, 0x03	; 3
    1132:	8e ef       	ldi	r24, 0xFE	; 254
    1134:	93 e0       	ldi	r25, 0x03	; 3
	int i,ac;
	for( i = 0 ; i < NUM_ARGS ; i ++) {
		av[i] = &avbuf[i][0];
    1136:	81 93       	st	Z+, r24
    1138:	91 93       	st	Z+, r25
    113a:	45 96       	adiw	r24, 0x15	; 21


void exec_cmd()
{
	int i,ac;
	for( i = 0 ; i < NUM_ARGS ; i ++) {
    113c:	23 e0       	ldi	r18, 0x03	; 3
    113e:	ee 3f       	cpi	r30, 0xFE	; 254
    1140:	f2 07       	cpc	r31, r18
    1142:	c9 f7       	brne	.-14     	; 0x1136 <exec_cmd+0x10>
		av[i] = &avbuf[i][0];
	}
	ac = get_args(Cmd_buf.cmd_buf,av);
    1144:	74 97       	sbiw	r30, 0x14	; 20
    1146:	80 ed       	ldi	r24, 0xD0	; 208
    1148:	94 e0       	ldi	r25, 0x04	; 4
    114a:	bf 01       	movw	r22, r30
    114c:	0e 94 39 08 	call	0x1072	; 0x1072 <get_args>
    1150:	8c 01       	movw	r16, r24
    1152:	c3 e6       	ldi	r28, 0x63	; 99
    1154:	d3 e0       	ldi	r29, 0x03	; 3

	for( i = 0 ; ; i ++)
	{
		if(cmd_tbl[i].cmd == NULL) break;
    1156:	68 81       	ld	r22, Y
    1158:	79 81       	ldd	r23, Y+1	; 0x01
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	81 f0       	breq	.+32     	; 0x1180 <exec_cmd+0x5a>
		if(!strcmp(av[0],cmd_tbl[i].cmd)) {
    1160:	80 91 ea 03 	lds	r24, 0x03EA
    1164:	90 91 eb 03 	lds	r25, 0x03EB
    1168:	0e 94 13 09 	call	0x1226	; 0x1226 <strcmp>
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	31 f4       	brne	.+12     	; 0x117c <exec_cmd+0x56>
			(*cmd_tbl[i].fn)(ac,av);
    1170:	ea 81       	ldd	r30, Y+2	; 0x02
    1172:	fb 81       	ldd	r31, Y+3	; 0x03
    1174:	c8 01       	movw	r24, r16
    1176:	6a ee       	ldi	r22, 0xEA	; 234
    1178:	73 e0       	ldi	r23, 0x03	; 3
    117a:	09 95       	icall
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	eb cf       	rjmp	.-42     	; 0x1156 <exec_cmd+0x30>
		}
	}

}
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <main>:
void get_cmd();
void exec_cmd();


int main(void)
{
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17

  volatile float result;

 //SFIOR &= ~PUD;
 stdout = &mystdout;
    1192:	84 e6       	ldi	r24, 0x64	; 100
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	90 93 6c 09 	sts	0x096C, r25
    119a:	80 93 6b 09 	sts	0x096B, r24
 uart_init(UART_CH0,STOP_BIT1,PARITY_NONE,BAUD_9600,NO,NO);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	00 e0       	ldi	r16, 0x00	; 0
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	ee 24       	eor	r14, r14
    11b4:	ff 24       	eor	r15, r15
    11b6:	0e 94 88 00 	call	0x110	; 0x110 <uart_init>
 //uart_init(UART_CH1,STOP_BIT1,PARITY_NONE,BAUD_250K,NO,NO);

 printf("Hello Uart0 works at %d baud \n",9600);
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <main+0x32>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <main+0x34>
    11be:	8b e1       	ldi	r24, 0x1B	; 27
    11c0:	92 e0       	ldi	r25, 0x02	; 2
    11c2:	ed b7       	in	r30, 0x3d	; 61
    11c4:	fe b7       	in	r31, 0x3e	; 62
    11c6:	92 83       	std	Z+2, r25	; 0x02
    11c8:	81 83       	std	Z+1, r24	; 0x01
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	95 e2       	ldi	r25, 0x25	; 37
    11ce:	94 83       	std	Z+4, r25	; 0x04
    11d0:	83 83       	std	Z+3, r24	; 0x03
    11d2:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
 printf("monitor-128 $ ");
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0a e3       	ldi	r16, 0x3A	; 58
    11dc:	12 e0       	ldi	r17, 0x02	; 2
    11de:	ed b7       	in	r30, 0x3d	; 61
    11e0:	fe b7       	in	r31, 0x3e	; 62
    11e2:	12 83       	std	Z+2, r17	; 0x02
    11e4:	01 83       	std	Z+1, r16	; 0x01
    11e6:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
 while(1)
 {
 	get_cmd();
	exec_cmd();
	printf("monitor-128 $ ");
    11ee:	f0 2e       	mov	r15, r16
    11f0:	01 2f       	mov	r16, r17

 printf("Hello Uart0 works at %d baud \n",9600);
 printf("monitor-128 $ ");
 while(1)
 {
 	get_cmd();
    11f2:	0e 94 27 01 	call	0x24e	; 0x24e <get_cmd>
	exec_cmd();
    11f6:	0e 94 93 08 	call	0x1126	; 0x1126 <exec_cmd>
	printf("monitor-128 $ ");
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <main+0x72>
    11fc:	ed b7       	in	r30, 0x3d	; 61
    11fe:	fe b7       	in	r31, 0x3e	; 62
    1200:	f1 82       	std	Z+1, r15	; 0x01
    1202:	02 83       	std	Z+2, r16	; 0x02
    1204:	0e 94 23 09 	call	0x1246	; 0x1246 <printf>
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	f2 cf       	rjmp	.-28     	; 0x11f2 <main+0x68>

0000120e <__udivmodqi4>:
    120e:	99 1b       	sub	r25, r25
    1210:	79 e0       	ldi	r23, 0x09	; 9
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__udivmodqi4_ep>

00001214 <__udivmodqi4_loop>:
    1214:	99 1f       	adc	r25, r25
    1216:	96 17       	cp	r25, r22
    1218:	08 f0       	brcs	.+2      	; 0x121c <__udivmodqi4_ep>
    121a:	96 1b       	sub	r25, r22

0000121c <__udivmodqi4_ep>:
    121c:	88 1f       	adc	r24, r24
    121e:	7a 95       	dec	r23
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__udivmodqi4_loop>
    1222:	80 95       	com	r24
    1224:	08 95       	ret

00001226 <strcmp>:
    1226:	fb 01       	movw	r30, r22
    1228:	dc 01       	movw	r26, r24
    122a:	8d 91       	ld	r24, X+
    122c:	01 90       	ld	r0, Z+
    122e:	80 19       	sub	r24, r0
    1230:	01 10       	cpse	r0, r1
    1232:	d9 f3       	breq	.-10     	; 0x122a <strcmp+0x4>
    1234:	99 0b       	sbc	r25, r25
    1236:	08 95       	ret

00001238 <strcpy>:
    1238:	fb 01       	movw	r30, r22
    123a:	dc 01       	movw	r26, r24
    123c:	01 90       	ld	r0, Z+
    123e:	0d 92       	st	X+, r0
    1240:	00 20       	and	r0, r0
    1242:	e1 f7       	brne	.-8      	; 0x123c <strcpy+0x4>
    1244:	08 95       	ret

00001246 <printf>:
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	fe 01       	movw	r30, r28
    1250:	35 96       	adiw	r30, 0x05	; 5
    1252:	61 91       	ld	r22, Z+
    1254:	71 91       	ld	r23, Z+
    1256:	80 91 6b 09 	lds	r24, 0x096B
    125a:	90 91 6c 09 	lds	r25, 0x096C
    125e:	af 01       	movw	r20, r30
    1260:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vfprintf>
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <puts>:
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	8c 01       	movw	r16, r24
    1274:	e0 91 6b 09 	lds	r30, 0x096B
    1278:	f0 91 6c 09 	lds	r31, 0x096C
    127c:	83 81       	ldd	r24, Z+3	; 0x03
    127e:	81 ff       	sbrs	r24, 1
    1280:	21 c0       	rjmp	.+66     	; 0x12c4 <puts+0x5a>
    1282:	c0 e0       	ldi	r28, 0x00	; 0
    1284:	d0 e0       	ldi	r29, 0x00	; 0
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <puts+0x38>
    1288:	e0 91 6b 09 	lds	r30, 0x096B
    128c:	f0 91 6c 09 	lds	r31, 0x096C
    1290:	20 85       	ldd	r18, Z+8	; 0x08
    1292:	31 85       	ldd	r19, Z+9	; 0x09
    1294:	bf 01       	movw	r22, r30
    1296:	f9 01       	movw	r30, r18
    1298:	09 95       	icall
    129a:	89 2b       	or	r24, r25
    129c:	11 f0       	breq	.+4      	; 0x12a2 <puts+0x38>
    129e:	cf ef       	ldi	r28, 0xFF	; 255
    12a0:	df ef       	ldi	r29, 0xFF	; 255
    12a2:	f8 01       	movw	r30, r16
    12a4:	81 91       	ld	r24, Z+
    12a6:	8f 01       	movw	r16, r30
    12a8:	88 23       	and	r24, r24
    12aa:	71 f7       	brne	.-36     	; 0x1288 <puts+0x1e>
    12ac:	e0 91 6b 09 	lds	r30, 0x096B
    12b0:	f0 91 6c 09 	lds	r31, 0x096C
    12b4:	20 85       	ldd	r18, Z+8	; 0x08
    12b6:	31 85       	ldd	r19, Z+9	; 0x09
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	bf 01       	movw	r22, r30
    12bc:	f9 01       	movw	r30, r18
    12be:	09 95       	icall
    12c0:	89 2b       	or	r24, r25
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <puts+0x5e>
    12c4:	cf ef       	ldi	r28, 0xFF	; 255
    12c6:	df ef       	ldi	r29, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <vfprintf>:
    12d4:	2f 92       	push	r2
    12d6:	3f 92       	push	r3
    12d8:	4f 92       	push	r4
    12da:	5f 92       	push	r5
    12dc:	6f 92       	push	r6
    12de:	7f 92       	push	r7
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2b 97       	sbiw	r28, 0x0b	; 11
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	3c 01       	movw	r6, r24
    130a:	2b 01       	movw	r4, r22
    130c:	5a 01       	movw	r10, r20
    130e:	fc 01       	movw	r30, r24
    1310:	17 82       	std	Z+7, r1	; 0x07
    1312:	16 82       	std	Z+6, r1	; 0x06
    1314:	83 81       	ldd	r24, Z+3	; 0x03
    1316:	81 fd       	sbrc	r24, 1
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <vfprintf+0x4c>
    131a:	6f ef       	ldi	r22, 0xFF	; 255
    131c:	7f ef       	ldi	r23, 0xFF	; 255
    131e:	c6 c1       	rjmp	.+908    	; 0x16ac <vfprintf+0x3d8>
    1320:	9a e0       	ldi	r25, 0x0A	; 10
    1322:	89 2e       	mov	r8, r25
    1324:	1e 01       	movw	r2, r28
    1326:	08 94       	sec
    1328:	21 1c       	adc	r2, r1
    132a:	31 1c       	adc	r3, r1
    132c:	f3 01       	movw	r30, r6
    132e:	23 81       	ldd	r18, Z+3	; 0x03
    1330:	f2 01       	movw	r30, r4
    1332:	23 fd       	sbrc	r18, 3
    1334:	85 91       	lpm	r24, Z+
    1336:	23 ff       	sbrs	r18, 3
    1338:	81 91       	ld	r24, Z+
    133a:	2f 01       	movw	r4, r30
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <vfprintf+0x6e>
    1340:	b2 c1       	rjmp	.+868    	; 0x16a6 <vfprintf+0x3d2>
    1342:	85 32       	cpi	r24, 0x25	; 37
    1344:	39 f4       	brne	.+14     	; 0x1354 <vfprintf+0x80>
    1346:	23 fd       	sbrc	r18, 3
    1348:	85 91       	lpm	r24, Z+
    134a:	23 ff       	sbrs	r18, 3
    134c:	81 91       	ld	r24, Z+
    134e:	2f 01       	movw	r4, r30
    1350:	85 32       	cpi	r24, 0x25	; 37
    1352:	29 f4       	brne	.+10     	; 0x135e <vfprintf+0x8a>
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b3 01       	movw	r22, r6
    1358:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    135c:	e7 cf       	rjmp	.-50     	; 0x132c <vfprintf+0x58>
    135e:	98 2f       	mov	r25, r24
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	99 24       	eor	r9, r9
    1366:	ff e1       	ldi	r31, 0x1F	; 31
    1368:	ff 15       	cp	r31, r15
    136a:	d0 f0       	brcs	.+52     	; 0x13a0 <vfprintf+0xcc>
    136c:	9b 32       	cpi	r25, 0x2B	; 43
    136e:	69 f0       	breq	.+26     	; 0x138a <vfprintf+0xb6>
    1370:	9c 32       	cpi	r25, 0x2C	; 44
    1372:	28 f4       	brcc	.+10     	; 0x137e <vfprintf+0xaa>
    1374:	90 32       	cpi	r25, 0x20	; 32
    1376:	59 f0       	breq	.+22     	; 0x138e <vfprintf+0xba>
    1378:	93 32       	cpi	r25, 0x23	; 35
    137a:	91 f4       	brne	.+36     	; 0x13a0 <vfprintf+0xcc>
    137c:	0e c0       	rjmp	.+28     	; 0x139a <vfprintf+0xc6>
    137e:	9d 32       	cpi	r25, 0x2D	; 45
    1380:	49 f0       	breq	.+18     	; 0x1394 <vfprintf+0xc0>
    1382:	90 33       	cpi	r25, 0x30	; 48
    1384:	69 f4       	brne	.+26     	; 0x13a0 <vfprintf+0xcc>
    1386:	41 e0       	ldi	r20, 0x01	; 1
    1388:	24 c0       	rjmp	.+72     	; 0x13d2 <vfprintf+0xfe>
    138a:	52 e0       	ldi	r21, 0x02	; 2
    138c:	f5 2a       	or	r15, r21
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	f8 2a       	or	r15, r24
    1392:	28 c0       	rjmp	.+80     	; 0x13e4 <vfprintf+0x110>
    1394:	98 e0       	ldi	r25, 0x08	; 8
    1396:	f9 2a       	or	r15, r25
    1398:	25 c0       	rjmp	.+74     	; 0x13e4 <vfprintf+0x110>
    139a:	e0 e1       	ldi	r30, 0x10	; 16
    139c:	fe 2a       	or	r15, r30
    139e:	22 c0       	rjmp	.+68     	; 0x13e4 <vfprintf+0x110>
    13a0:	f7 fc       	sbrc	r15, 7
    13a2:	29 c0       	rjmp	.+82     	; 0x13f6 <vfprintf+0x122>
    13a4:	89 2f       	mov	r24, r25
    13a6:	80 53       	subi	r24, 0x30	; 48
    13a8:	8a 30       	cpi	r24, 0x0A	; 10
    13aa:	70 f4       	brcc	.+28     	; 0x13c8 <vfprintf+0xf4>
    13ac:	f6 fe       	sbrs	r15, 6
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <vfprintf+0xe6>
    13b0:	98 9c       	mul	r9, r8
    13b2:	90 2c       	mov	r9, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	98 0e       	add	r9, r24
    13b8:	15 c0       	rjmp	.+42     	; 0x13e4 <vfprintf+0x110>
    13ba:	e8 9c       	mul	r14, r8
    13bc:	e0 2c       	mov	r14, r0
    13be:	11 24       	eor	r1, r1
    13c0:	e8 0e       	add	r14, r24
    13c2:	f0 e2       	ldi	r31, 0x20	; 32
    13c4:	ff 2a       	or	r15, r31
    13c6:	0e c0       	rjmp	.+28     	; 0x13e4 <vfprintf+0x110>
    13c8:	9e 32       	cpi	r25, 0x2E	; 46
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <vfprintf+0x102>
    13cc:	f6 fc       	sbrc	r15, 6
    13ce:	6b c1       	rjmp	.+726    	; 0x16a6 <vfprintf+0x3d2>
    13d0:	40 e4       	ldi	r20, 0x40	; 64
    13d2:	f4 2a       	or	r15, r20
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <vfprintf+0x110>
    13d6:	9c 36       	cpi	r25, 0x6C	; 108
    13d8:	19 f4       	brne	.+6      	; 0x13e0 <vfprintf+0x10c>
    13da:	50 e8       	ldi	r21, 0x80	; 128
    13dc:	f5 2a       	or	r15, r21
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <vfprintf+0x110>
    13e0:	98 36       	cpi	r25, 0x68	; 104
    13e2:	49 f4       	brne	.+18     	; 0x13f6 <vfprintf+0x122>
    13e4:	f2 01       	movw	r30, r4
    13e6:	23 fd       	sbrc	r18, 3
    13e8:	95 91       	lpm	r25, Z+
    13ea:	23 ff       	sbrs	r18, 3
    13ec:	91 91       	ld	r25, Z+
    13ee:	2f 01       	movw	r4, r30
    13f0:	99 23       	and	r25, r25
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <vfprintf+0x122>
    13f4:	b8 cf       	rjmp	.-144    	; 0x1366 <vfprintf+0x92>
    13f6:	89 2f       	mov	r24, r25
    13f8:	85 54       	subi	r24, 0x45	; 69
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	18 f0       	brcs	.+6      	; 0x1404 <vfprintf+0x130>
    13fe:	80 52       	subi	r24, 0x20	; 32
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	38 f4       	brcc	.+14     	; 0x1412 <vfprintf+0x13e>
    1404:	44 e0       	ldi	r20, 0x04	; 4
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	a4 0e       	add	r10, r20
    140a:	b5 1e       	adc	r11, r21
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	59 83       	std	Y+1, r21	; 0x01
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <vfprintf+0x15c>
    1412:	93 36       	cpi	r25, 0x63	; 99
    1414:	31 f0       	breq	.+12     	; 0x1422 <vfprintf+0x14e>
    1416:	93 37       	cpi	r25, 0x73	; 115
    1418:	79 f0       	breq	.+30     	; 0x1438 <vfprintf+0x164>
    141a:	93 35       	cpi	r25, 0x53	; 83
    141c:	09 f0       	breq	.+2      	; 0x1420 <vfprintf+0x14c>
    141e:	56 c0       	rjmp	.+172    	; 0x14cc <vfprintf+0x1f8>
    1420:	20 c0       	rjmp	.+64     	; 0x1462 <vfprintf+0x18e>
    1422:	f5 01       	movw	r30, r10
    1424:	80 81       	ld	r24, Z
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	42 e0       	ldi	r20, 0x02	; 2
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	a4 0e       	add	r10, r20
    142e:	b5 1e       	adc	r11, r21
    1430:	61 01       	movw	r12, r2
    1432:	01 e0       	ldi	r16, 0x01	; 1
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	12 c0       	rjmp	.+36     	; 0x145c <vfprintf+0x188>
    1438:	f5 01       	movw	r30, r10
    143a:	c0 80       	ld	r12, Z
    143c:	d1 80       	ldd	r13, Z+1	; 0x01
    143e:	f6 fc       	sbrc	r15, 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x174>
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f ef       	ldi	r23, 0xFF	; 255
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0x178>
    1448:	69 2d       	mov	r22, r9
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	a4 0e       	add	r10, r20
    1452:	b5 1e       	adc	r11, r21
    1454:	c6 01       	movw	r24, r12
    1456:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <strnlen>
    145a:	8c 01       	movw	r16, r24
    145c:	5f e7       	ldi	r21, 0x7F	; 127
    145e:	f5 22       	and	r15, r21
    1460:	14 c0       	rjmp	.+40     	; 0x148a <vfprintf+0x1b6>
    1462:	f5 01       	movw	r30, r10
    1464:	c0 80       	ld	r12, Z
    1466:	d1 80       	ldd	r13, Z+1	; 0x01
    1468:	f6 fc       	sbrc	r15, 6
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x19e>
    146c:	6f ef       	ldi	r22, 0xFF	; 255
    146e:	7f ef       	ldi	r23, 0xFF	; 255
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x1a2>
    1472:	69 2d       	mov	r22, r9
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	42 e0       	ldi	r20, 0x02	; 2
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	a4 0e       	add	r10, r20
    147c:	b5 1e       	adc	r11, r21
    147e:	c6 01       	movw	r24, r12
    1480:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <strnlen_P>
    1484:	8c 01       	movw	r16, r24
    1486:	50 e8       	ldi	r21, 0x80	; 128
    1488:	f5 2a       	or	r15, r21
    148a:	f3 fe       	sbrs	r15, 3
    148c:	07 c0       	rjmp	.+14     	; 0x149c <vfprintf+0x1c8>
    148e:	1a c0       	rjmp	.+52     	; 0x14c4 <vfprintf+0x1f0>
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	b3 01       	movw	r22, r6
    1496:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    149a:	ea 94       	dec	r14
    149c:	8e 2d       	mov	r24, r14
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	08 17       	cp	r16, r24
    14a2:	19 07       	cpc	r17, r25
    14a4:	a8 f3       	brcs	.-22     	; 0x1490 <vfprintf+0x1bc>
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <vfprintf+0x1f0>
    14a8:	f6 01       	movw	r30, r12
    14aa:	f7 fc       	sbrc	r15, 7
    14ac:	85 91       	lpm	r24, Z+
    14ae:	f7 fe       	sbrs	r15, 7
    14b0:	81 91       	ld	r24, Z+
    14b2:	6f 01       	movw	r12, r30
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	b3 01       	movw	r22, r6
    14b8:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    14bc:	e1 10       	cpse	r14, r1
    14be:	ea 94       	dec	r14
    14c0:	01 50       	subi	r16, 0x01	; 1
    14c2:	10 40       	sbci	r17, 0x00	; 0
    14c4:	01 15       	cp	r16, r1
    14c6:	11 05       	cpc	r17, r1
    14c8:	79 f7       	brne	.-34     	; 0x14a8 <vfprintf+0x1d4>
    14ca:	ea c0       	rjmp	.+468    	; 0x16a0 <vfprintf+0x3cc>
    14cc:	94 36       	cpi	r25, 0x64	; 100
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <vfprintf+0x200>
    14d0:	99 36       	cpi	r25, 0x69	; 105
    14d2:	69 f5       	brne	.+90     	; 0x152e <vfprintf+0x25a>
    14d4:	f7 fe       	sbrs	r15, 7
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <vfprintf+0x214>
    14d8:	f5 01       	movw	r30, r10
    14da:	20 81       	ld	r18, Z
    14dc:	31 81       	ldd	r19, Z+1	; 0x01
    14de:	42 81       	ldd	r20, Z+2	; 0x02
    14e0:	53 81       	ldd	r21, Z+3	; 0x03
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <vfprintf+0x228>
    14e8:	f5 01       	movw	r30, r10
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	9c 01       	movw	r18, r24
    14f0:	44 27       	eor	r20, r20
    14f2:	37 fd       	sbrc	r19, 7
    14f4:	40 95       	com	r20
    14f6:	54 2f       	mov	r21, r20
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a8 0e       	add	r10, r24
    14fe:	b9 1e       	adc	r11, r25
    1500:	9f e6       	ldi	r25, 0x6F	; 111
    1502:	f9 22       	and	r15, r25
    1504:	57 ff       	sbrs	r21, 7
    1506:	09 c0       	rjmp	.+18     	; 0x151a <vfprintf+0x246>
    1508:	50 95       	com	r21
    150a:	40 95       	com	r20
    150c:	30 95       	com	r19
    150e:	21 95       	neg	r18
    1510:	3f 4f       	sbci	r19, 0xFF	; 255
    1512:	4f 4f       	sbci	r20, 0xFF	; 255
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	e0 e8       	ldi	r30, 0x80	; 128
    1518:	fe 2a       	or	r15, r30
    151a:	ca 01       	movw	r24, r20
    151c:	b9 01       	movw	r22, r18
    151e:	a1 01       	movw	r20, r2
    1520:	2a e0       	ldi	r18, 0x0A	; 10
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__ultoa_invert>
    1528:	d8 2e       	mov	r13, r24
    152a:	d2 18       	sub	r13, r2
    152c:	40 c0       	rjmp	.+128    	; 0x15ae <vfprintf+0x2da>
    152e:	95 37       	cpi	r25, 0x75	; 117
    1530:	29 f4       	brne	.+10     	; 0x153c <vfprintf+0x268>
    1532:	1f 2d       	mov	r17, r15
    1534:	1f 7e       	andi	r17, 0xEF	; 239
    1536:	2a e0       	ldi	r18, 0x0A	; 10
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	1d c0       	rjmp	.+58     	; 0x1576 <vfprintf+0x2a2>
    153c:	1f 2d       	mov	r17, r15
    153e:	19 7f       	andi	r17, 0xF9	; 249
    1540:	9f 36       	cpi	r25, 0x6F	; 111
    1542:	61 f0       	breq	.+24     	; 0x155c <vfprintf+0x288>
    1544:	90 37       	cpi	r25, 0x70	; 112
    1546:	20 f4       	brcc	.+8      	; 0x1550 <vfprintf+0x27c>
    1548:	98 35       	cpi	r25, 0x58	; 88
    154a:	09 f0       	breq	.+2      	; 0x154e <vfprintf+0x27a>
    154c:	ac c0       	rjmp	.+344    	; 0x16a6 <vfprintf+0x3d2>
    154e:	0f c0       	rjmp	.+30     	; 0x156e <vfprintf+0x29a>
    1550:	90 37       	cpi	r25, 0x70	; 112
    1552:	39 f0       	breq	.+14     	; 0x1562 <vfprintf+0x28e>
    1554:	98 37       	cpi	r25, 0x78	; 120
    1556:	09 f0       	breq	.+2      	; 0x155a <vfprintf+0x286>
    1558:	a6 c0       	rjmp	.+332    	; 0x16a6 <vfprintf+0x3d2>
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <vfprintf+0x290>
    155c:	28 e0       	ldi	r18, 0x08	; 8
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <vfprintf+0x2a2>
    1562:	10 61       	ori	r17, 0x10	; 16
    1564:	14 fd       	sbrc	r17, 4
    1566:	14 60       	ori	r17, 0x04	; 4
    1568:	20 e1       	ldi	r18, 0x10	; 16
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <vfprintf+0x2a2>
    156e:	14 fd       	sbrc	r17, 4
    1570:	16 60       	ori	r17, 0x06	; 6
    1572:	20 e1       	ldi	r18, 0x10	; 16
    1574:	32 e0       	ldi	r19, 0x02	; 2
    1576:	17 ff       	sbrs	r17, 7
    1578:	08 c0       	rjmp	.+16     	; 0x158a <vfprintf+0x2b6>
    157a:	f5 01       	movw	r30, r10
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	44 e0       	ldi	r20, 0x04	; 4
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	08 c0       	rjmp	.+16     	; 0x159a <vfprintf+0x2c6>
    158a:	f5 01       	movw	r30, r10
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	bc 01       	movw	r22, r24
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	42 e0       	ldi	r20, 0x02	; 2
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	a4 0e       	add	r10, r20
    159c:	b5 1e       	adc	r11, r21
    159e:	a1 01       	movw	r20, r2
    15a0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__ultoa_invert>
    15a4:	d8 2e       	mov	r13, r24
    15a6:	d2 18       	sub	r13, r2
    15a8:	8f e7       	ldi	r24, 0x7F	; 127
    15aa:	f8 2e       	mov	r15, r24
    15ac:	f1 22       	and	r15, r17
    15ae:	f6 fe       	sbrs	r15, 6
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <vfprintf+0x2f4>
    15b2:	5e ef       	ldi	r21, 0xFE	; 254
    15b4:	f5 22       	and	r15, r21
    15b6:	d9 14       	cp	r13, r9
    15b8:	38 f4       	brcc	.+14     	; 0x15c8 <vfprintf+0x2f4>
    15ba:	f4 fe       	sbrs	r15, 4
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <vfprintf+0x2f8>
    15be:	f2 fc       	sbrc	r15, 2
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <vfprintf+0x2f8>
    15c2:	8f ee       	ldi	r24, 0xEF	; 239
    15c4:	f8 22       	and	r15, r24
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x2f8>
    15c8:	1d 2d       	mov	r17, r13
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <vfprintf+0x2fa>
    15cc:	19 2d       	mov	r17, r9
    15ce:	f4 fe       	sbrs	r15, 4
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <vfprintf+0x318>
    15d2:	fe 01       	movw	r30, r28
    15d4:	ed 0d       	add	r30, r13
    15d6:	f1 1d       	adc	r31, r1
    15d8:	80 81       	ld	r24, Z
    15da:	80 33       	cpi	r24, 0x30	; 48
    15dc:	19 f4       	brne	.+6      	; 0x15e4 <vfprintf+0x310>
    15de:	99 ee       	ldi	r25, 0xE9	; 233
    15e0:	f9 22       	and	r15, r25
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <vfprintf+0x320>
    15e4:	1f 5f       	subi	r17, 0xFF	; 255
    15e6:	f2 fe       	sbrs	r15, 2
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <vfprintf+0x320>
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <vfprintf+0x31e>
    15ec:	8f 2d       	mov	r24, r15
    15ee:	86 78       	andi	r24, 0x86	; 134
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <vfprintf+0x320>
    15f2:	1f 5f       	subi	r17, 0xFF	; 255
    15f4:	0f 2d       	mov	r16, r15
    15f6:	f3 fc       	sbrc	r15, 3
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <vfprintf+0x34e>
    15fa:	f0 fe       	sbrs	r15, 0
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <vfprintf+0x348>
    15fe:	1e 15       	cp	r17, r14
    1600:	10 f0       	brcs	.+4      	; 0x1606 <vfprintf+0x332>
    1602:	9d 2c       	mov	r9, r13
    1604:	0b c0       	rjmp	.+22     	; 0x161c <vfprintf+0x348>
    1606:	9d 2c       	mov	r9, r13
    1608:	9e 0c       	add	r9, r14
    160a:	91 1a       	sub	r9, r17
    160c:	1e 2d       	mov	r17, r14
    160e:	06 c0       	rjmp	.+12     	; 0x161c <vfprintf+0x348>
    1610:	80 e2       	ldi	r24, 0x20	; 32
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	b3 01       	movw	r22, r6
    1616:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    161a:	1f 5f       	subi	r17, 0xFF	; 255
    161c:	1e 15       	cp	r17, r14
    161e:	c0 f3       	brcs	.-16     	; 0x1610 <vfprintf+0x33c>
    1620:	04 c0       	rjmp	.+8      	; 0x162a <vfprintf+0x356>
    1622:	1e 15       	cp	r17, r14
    1624:	10 f4       	brcc	.+4      	; 0x162a <vfprintf+0x356>
    1626:	e1 1a       	sub	r14, r17
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x358>
    162a:	ee 24       	eor	r14, r14
    162c:	04 ff       	sbrs	r16, 4
    162e:	0f c0       	rjmp	.+30     	; 0x164e <vfprintf+0x37a>
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b3 01       	movw	r22, r6
    1636:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    163a:	02 ff       	sbrs	r16, 2
    163c:	1d c0       	rjmp	.+58     	; 0x1678 <vfprintf+0x3a4>
    163e:	01 fd       	sbrc	r16, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x374>
    1642:	88 e7       	ldi	r24, 0x78	; 120
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e c0       	rjmp	.+28     	; 0x1664 <vfprintf+0x390>
    1648:	88 e5       	ldi	r24, 0x58	; 88
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0b c0       	rjmp	.+22     	; 0x1664 <vfprintf+0x390>
    164e:	80 2f       	mov	r24, r16
    1650:	86 78       	andi	r24, 0x86	; 134
    1652:	91 f0       	breq	.+36     	; 0x1678 <vfprintf+0x3a4>
    1654:	01 ff       	sbrs	r16, 1
    1656:	02 c0       	rjmp	.+4      	; 0x165c <vfprintf+0x388>
    1658:	8b e2       	ldi	r24, 0x2B	; 43
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x38a>
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	f7 fc       	sbrc	r15, 7
    1660:	8d e2       	ldi	r24, 0x2D	; 45
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b3 01       	movw	r22, r6
    1666:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <vfprintf+0x3a4>
    166c:	80 e3       	ldi	r24, 0x30	; 48
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b3 01       	movw	r22, r6
    1672:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    1676:	9a 94       	dec	r9
    1678:	d9 14       	cp	r13, r9
    167a:	c0 f3       	brcs	.-16     	; 0x166c <vfprintf+0x398>
    167c:	da 94       	dec	r13
    167e:	f1 01       	movw	r30, r2
    1680:	ed 0d       	add	r30, r13
    1682:	f1 1d       	adc	r31, r1
    1684:	80 81       	ld	r24, Z
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	b3 01       	movw	r22, r6
    168a:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    168e:	dd 20       	and	r13, r13
    1690:	a9 f7       	brne	.-22     	; 0x167c <vfprintf+0x3a8>
    1692:	06 c0       	rjmp	.+12     	; 0x16a0 <vfprintf+0x3cc>
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	b3 01       	movw	r22, r6
    169a:	0e 94 86 0b 	call	0x170c	; 0x170c <fputc>
    169e:	ea 94       	dec	r14
    16a0:	ee 20       	and	r14, r14
    16a2:	c1 f7       	brne	.-16     	; 0x1694 <vfprintf+0x3c0>
    16a4:	43 ce       	rjmp	.-890    	; 0x132c <vfprintf+0x58>
    16a6:	f3 01       	movw	r30, r6
    16a8:	66 81       	ldd	r22, Z+6	; 0x06
    16aa:	77 81       	ldd	r23, Z+7	; 0x07
    16ac:	cb 01       	movw	r24, r22
    16ae:	2b 96       	adiw	r28, 0x0b	; 11
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	bf 90       	pop	r11
    16cc:	af 90       	pop	r10
    16ce:	9f 90       	pop	r9
    16d0:	8f 90       	pop	r8
    16d2:	7f 90       	pop	r7
    16d4:	6f 90       	pop	r6
    16d6:	5f 90       	pop	r5
    16d8:	4f 90       	pop	r4
    16da:	3f 90       	pop	r3
    16dc:	2f 90       	pop	r2
    16de:	08 95       	ret

000016e0 <strnlen_P>:
    16e0:	fc 01       	movw	r30, r24
    16e2:	05 90       	lpm	r0, Z+
    16e4:	61 50       	subi	r22, 0x01	; 1
    16e6:	70 40       	sbci	r23, 0x00	; 0
    16e8:	01 10       	cpse	r0, r1
    16ea:	d8 f7       	brcc	.-10     	; 0x16e2 <strnlen_P+0x2>
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	8e 0f       	add	r24, r30
    16f2:	9f 1f       	adc	r25, r31
    16f4:	08 95       	ret

000016f6 <strnlen>:
    16f6:	fc 01       	movw	r30, r24
    16f8:	61 50       	subi	r22, 0x01	; 1
    16fa:	70 40       	sbci	r23, 0x00	; 0
    16fc:	01 90       	ld	r0, Z+
    16fe:	01 10       	cpse	r0, r1
    1700:	d8 f7       	brcc	.-10     	; 0x16f8 <strnlen+0x2>
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	8e 0f       	add	r24, r30
    1708:	9f 1f       	adc	r25, r31
    170a:	08 95       	ret

0000170c <fputc>:
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	8c 01       	movw	r16, r24
    1716:	eb 01       	movw	r28, r22
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	81 ff       	sbrs	r24, 1
    171c:	1b c0       	rjmp	.+54     	; 0x1754 <fputc+0x48>
    171e:	82 ff       	sbrs	r24, 2
    1720:	0d c0       	rjmp	.+26     	; 0x173c <fputc+0x30>
    1722:	2e 81       	ldd	r18, Y+6	; 0x06
    1724:	3f 81       	ldd	r19, Y+7	; 0x07
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	28 17       	cp	r18, r24
    172c:	39 07       	cpc	r19, r25
    172e:	64 f4       	brge	.+24     	; 0x1748 <fputc+0x3c>
    1730:	e8 81       	ld	r30, Y
    1732:	f9 81       	ldd	r31, Y+1	; 0x01
    1734:	01 93       	st	Z+, r16
    1736:	f9 83       	std	Y+1, r31	; 0x01
    1738:	e8 83       	st	Y, r30
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <fputc+0x3c>
    173c:	e8 85       	ldd	r30, Y+8	; 0x08
    173e:	f9 85       	ldd	r31, Y+9	; 0x09
    1740:	80 2f       	mov	r24, r16
    1742:	09 95       	icall
    1744:	89 2b       	or	r24, r25
    1746:	31 f4       	brne	.+12     	; 0x1754 <fputc+0x48>
    1748:	8e 81       	ldd	r24, Y+6	; 0x06
    174a:	9f 81       	ldd	r25, Y+7	; 0x07
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	9f 83       	std	Y+7, r25	; 0x07
    1750:	8e 83       	std	Y+6, r24	; 0x06
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <fputc+0x4c>
    1754:	0f ef       	ldi	r16, 0xFF	; 255
    1756:	1f ef       	ldi	r17, 0xFF	; 255
    1758:	c8 01       	movw	r24, r16
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <__ultoa_invert>:
    1764:	fa 01       	movw	r30, r20
    1766:	aa 27       	eor	r26, r26
    1768:	28 30       	cpi	r18, 0x08	; 8
    176a:	51 f1       	breq	.+84     	; 0x17c0 <__ultoa_invert+0x5c>
    176c:	20 31       	cpi	r18, 0x10	; 16
    176e:	81 f1       	breq	.+96     	; 0x17d0 <__ultoa_invert+0x6c>
    1770:	e8 94       	clt
    1772:	6f 93       	push	r22
    1774:	6e 7f       	andi	r22, 0xFE	; 254
    1776:	6e 5f       	subi	r22, 0xFE	; 254
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	8f 4f       	sbci	r24, 0xFF	; 255
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	af 4f       	sbci	r26, 0xFF	; 255
    1780:	b1 e0       	ldi	r27, 0x01	; 1
    1782:	3e d0       	rcall	.+124    	; 0x1800 <__ultoa_invert+0x9c>
    1784:	b4 e0       	ldi	r27, 0x04	; 4
    1786:	3c d0       	rcall	.+120    	; 0x1800 <__ultoa_invert+0x9c>
    1788:	67 0f       	add	r22, r23
    178a:	78 1f       	adc	r23, r24
    178c:	89 1f       	adc	r24, r25
    178e:	9a 1f       	adc	r25, r26
    1790:	a1 1d       	adc	r26, r1
    1792:	68 0f       	add	r22, r24
    1794:	79 1f       	adc	r23, r25
    1796:	8a 1f       	adc	r24, r26
    1798:	91 1d       	adc	r25, r1
    179a:	a1 1d       	adc	r26, r1
    179c:	6a 0f       	add	r22, r26
    179e:	71 1d       	adc	r23, r1
    17a0:	81 1d       	adc	r24, r1
    17a2:	91 1d       	adc	r25, r1
    17a4:	a1 1d       	adc	r26, r1
    17a6:	20 d0       	rcall	.+64     	; 0x17e8 <__ultoa_invert+0x84>
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__ultoa_invert+0x48>
    17aa:	68 94       	set
    17ac:	3f 91       	pop	r19
    17ae:	2a e0       	ldi	r18, 0x0A	; 10
    17b0:	26 9f       	mul	r18, r22
    17b2:	11 24       	eor	r1, r1
    17b4:	30 19       	sub	r19, r0
    17b6:	30 5d       	subi	r19, 0xD0	; 208
    17b8:	31 93       	st	Z+, r19
    17ba:	de f6       	brtc	.-74     	; 0x1772 <__ultoa_invert+0xe>
    17bc:	cf 01       	movw	r24, r30
    17be:	08 95       	ret
    17c0:	46 2f       	mov	r20, r22
    17c2:	47 70       	andi	r20, 0x07	; 7
    17c4:	40 5d       	subi	r20, 0xD0	; 208
    17c6:	41 93       	st	Z+, r20
    17c8:	b3 e0       	ldi	r27, 0x03	; 3
    17ca:	0f d0       	rcall	.+30     	; 0x17ea <__ultoa_invert+0x86>
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__ultoa_invert+0x5c>
    17ce:	f6 cf       	rjmp	.-20     	; 0x17bc <__ultoa_invert+0x58>
    17d0:	46 2f       	mov	r20, r22
    17d2:	4f 70       	andi	r20, 0x0F	; 15
    17d4:	40 5d       	subi	r20, 0xD0	; 208
    17d6:	4a 33       	cpi	r20, 0x3A	; 58
    17d8:	18 f0       	brcs	.+6      	; 0x17e0 <__ultoa_invert+0x7c>
    17da:	49 5d       	subi	r20, 0xD9	; 217
    17dc:	31 fd       	sbrc	r19, 1
    17de:	40 52       	subi	r20, 0x20	; 32
    17e0:	41 93       	st	Z+, r20
    17e2:	02 d0       	rcall	.+4      	; 0x17e8 <__ultoa_invert+0x84>
    17e4:	a9 f7       	brne	.-22     	; 0x17d0 <__ultoa_invert+0x6c>
    17e6:	ea cf       	rjmp	.-44     	; 0x17bc <__ultoa_invert+0x58>
    17e8:	b4 e0       	ldi	r27, 0x04	; 4
    17ea:	a6 95       	lsr	r26
    17ec:	97 95       	ror	r25
    17ee:	87 95       	ror	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	ba 95       	dec	r27
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__ultoa_invert+0x86>
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	61 05       	cpc	r22, r1
    17fc:	71 05       	cpc	r23, r1
    17fe:	08 95       	ret
    1800:	9b 01       	movw	r18, r22
    1802:	ac 01       	movw	r20, r24
    1804:	0a 2e       	mov	r0, r26
    1806:	06 94       	lsr	r0
    1808:	57 95       	ror	r21
    180a:	47 95       	ror	r20
    180c:	37 95       	ror	r19
    180e:	27 95       	ror	r18
    1810:	ba 95       	dec	r27
    1812:	c9 f7       	brne	.-14     	; 0x1806 <__ultoa_invert+0xa2>
    1814:	62 0f       	add	r22, r18
    1816:	73 1f       	adc	r23, r19
    1818:	84 1f       	adc	r24, r20
    181a:	95 1f       	adc	r25, r21
    181c:	a0 1d       	adc	r26, r0
    181e:	08 95       	ret

00001820 <_exit>:
    1820:	f8 94       	cli

00001822 <__stop_program>:
    1822:	ff cf       	rjmp	.-2      	; 0x1822 <__stop_program>
